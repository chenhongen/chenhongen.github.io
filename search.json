[{"title":"Springboot多模块jsp","url":"http://rebey.cn/2018/01/30/Springboot多模块jsp/","content":"<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>module1（如：封装好的一套组织机构、权限、角色、用户管理模块）包含jsp页面，module2（具体业务应用场景开发）依赖module1，结构图如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">parent</div><div class=\"line\">│       </div><div class=\"line\">└── module1</div><div class=\"line\">│   │── ...</div><div class=\"line\">│   └── src/main/resources</div><div class=\"line\">│       │── mapper</div><div class=\"line\">│       │── public</div><div class=\"line\">│       │   ...</div><div class=\"line\">│       src/main/webapp</div><div class=\"line\">│       └── WEB-INF</div><div class=\"line\">│            └── jsp</div><div class=\"line\">│</div><div class=\"line\">└── module2</div><div class=\"line\">    │   ...</div></pre></td></tr></table></figure></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>module1和module2的packaging均为jar。</li>\n<li><p>src/main/resources下静态资源，及src/main/webapp/WEB-INF/jsp通过==resources==打包到META-INF目录下。这里的META-INF指打成jar后，jar里的META-INF。值得注意的是，如果您的mapper位于src/main/resources下，也需要打包出来哦。<br><br>module1’s pom.xml的build标签内中添加resources：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 打包时将jsp文件拷贝到META-INF目录下--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 指定resources插件处理哪个目录下的资源文件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 注意必须要放在此目录下才能被访问到--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>META-INF/resources<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources/public<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>META-INF/resources<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>普通项目直接在application.yml中配置即可，多模块项目无效。采用WebConfig.java：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"/**\"</span>).addResourceLocations(<span class=\"string\">\"/\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 多模块的jsp访问，默认是src/main/webapp，但是多模块的目录只设置yml文件不行</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> InternalResourceViewResolver <span class=\"title\">viewResolver</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        InternalResourceViewResolver resolver = <span class=\"keyword\">new</span> InternalResourceViewResolver();</div><div class=\"line\">        resolver.setViewClass(org.springframework.web.servlet.view.JstlView.class);</div><div class=\"line\">        <span class=\"comment\">// jsp目录</span></div><div class=\"line\">        resolver.setPrefix(<span class=\"string\">\"/WEB-INF/jsp/\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 后缀</span></div><div class=\"line\">        resolver.setSuffix(<span class=\"string\">\".jsp\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> resolver;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h3><ul>\n<li>是否支持module1热部署；</li>\n</ul>\n<h3 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a><a href=\"https://rebey.cn/\">关于作者</a></h3><p>今年最后几个工作日了。看过日出也追过月光，忙碌一年的农民好像颗粒无收般难过。像极旧社会的大锅饭，干多干少结果好像并没有什么两样。所有的努力并不是当下就能体现的吧，就像乔布斯旁听美术课时大概也不知道会和苹果有什么关系。清风徐来，水波不兴。希望新的一年能有新的战场。</p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n"},{"title":"SSO CAS 服务端篇","url":"http://rebey.cn/2017/12/30/SSO CAS 服务端篇/","content":"<h2 id=\"一些芝士\"><a href=\"#一些芝士\" class=\"headerlink\" title=\"一些芝士\"></a>一些芝士</h2><h3 id=\"SSO的技术的几种技术方案\"><a href=\"#SSO的技术的几种技术方案\" class=\"headerlink\" title=\"SSO的技术的几种技术方案\"></a>SSO的技术的几种技术方案</h3><ul>\n<li>基于cookies实现</li>\n</ul>\n<p>适合同父域（将domain设置为rebey.cn，则a.rebey.cn与b.rebey.cn共享cookie）</p>\n<ul>\n<li>基于session共享来实现</li>\n</ul>\n<p>Session中所涉及的类型必须是子系统中共同拥有的（即程序集、类型都需要一致），不同语言互通相对麻烦</p>\n<ul>\n<li>基于票据ticket来实现（CAS）</li>\n</ul>\n<p>支持跨域，支持多语言客户端</p>\n<h3 id=\"请求过程\"><a href=\"#请求过程\" class=\"headerlink\" title=\"请求过程\"></a>请求过程</h3><p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/sso/sequence_diagram.jpg\" alt=\"pac4j\"></p>\n<p><img src=\"https://github.com/chenhongen/DemoRun/blob/master/sso/sso4.png?raw=true\" alt=\"image\"></p>\n<p>图一来自pac4j，图二来自网络（哪篇博客存的图在下忘了- -）。很透彻的两张图。</p>\n<p><img src=\"https://github.com/chenhongen/DemoRun/blob/master/sso/20171224.jpg?raw=true\" alt=\"image\"></p>\n<p>图三为本人手绘。描述了先访问A系统再访问B系统。记录下过程中一些重要点和问题：<br>一直纠结4认证成功后为什么要进行5,6步。暂且理解为为了解决跨域问题。</p>\n<h2 id=\"初始构建\"><a href=\"#初始构建\" class=\"headerlink\" title=\"初始构建\"></a>初始构建</h2><p>从<a href=\"https://github.com/apereo/cas-management-overlay\" target=\"_blank\" rel=\"external\">cas-management-overlay</a>下载官方提供的maven overlay（省去下载源码通过gradle去构建环节）。</p>\n<p>根据实际情况调整pom.xml；如：依赖的war包通过ali库无法下载，需要手动下载。</p>\n<p>cmd运行build.cmd run启动（前提是需要安装maven，配置环境变量）。<del>这种启动方式不太友好，是否能直接通关eclipse启动希望赐教。</del></p>\n<p>启动后默认地址：<a href=\"http://localhost:8443/cas\" target=\"_blank\" rel=\"external\">http://localhost:8443/cas</a></p>\n<p>默认用户名/密码为：casuser/Mellon</p>\n<h2 id=\"修改为oracle数据库jdbc验证\"><a href=\"#修改为oracle数据库jdbc验证\" class=\"headerlink\" title=\"修改为oracle数据库jdbc验证\"></a>修改为oracle数据库jdbc验证</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cas.authn.accept.users=casuser::Mellon</div><div class=\"line\"></div><div class=\"line\">cas.authn.jdbc.query[0].sql=select password from cap_user where user_id=?</div><div class=\"line\">cas.authn.jdbc.query[0].healthQuery=SELECT 1 from dual</div><div class=\"line\">cas.authn.jdbc.query[0].isolateInternalQueries=false</div><div class=\"line\">cas.authn.jdbc.query[0].url=jdbc:oracle:thin:@127.0.0.1:1521/ORCL</div><div class=\"line\">cas.authn.jdbc.query[0].failFast=true</div><div class=\"line\">cas.authn.jdbc.query[0].isolationLevelName=ISOLATION_READ_COMMITTED</div><div class=\"line\">cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.OracleDialect</div><div class=\"line\">cas.authn.jdbc.query[0].leakThreshold=10</div><div class=\"line\">cas.authn.jdbc.query[0].propagationBehaviorName=PROPAGATION_REQUIRED</div><div class=\"line\">cas.authn.jdbc.query[0].batchSize=1</div><div class=\"line\">cas.authn.jdbc.query[0].user=iamsuser</div><div class=\"line\">cas.authn.jdbc.query[0].ddlAuto=create-drop</div><div class=\"line\">cas.authn.jdbc.query[0].maxAgeDays=180</div><div class=\"line\">cas.authn.jdbc.query[0].password=iamsuser</div><div class=\"line\">cas.authn.jdbc.query[0].autocommit=false</div><div class=\"line\">cas.authn.jdbc.query[0].driverClass=oracle.jdbc.driver.OracleDriver</div><div class=\"line\">cas.authn.jdbc.query[0].idleTimeout=5000</div><div class=\"line\">cas.authn.jdbc.query[0].fieldPassword=password</div></pre></td></tr></table></figure>\n<h3 id=\"自定义加密匹配\"><a href=\"#自定义加密匹配\" class=\"headerlink\" title=\"自定义加密匹配\"></a>自定义加密匹配</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cas.authn.jdbc.query[0].passwordEncoder.type= com.che.ChePasswordEncoder</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.UnsupportedEncodingException;</div><div class=\"line\">import java.security.MessageDigest;</div><div class=\"line\">import java.security.NoSuchAlgorithmException;</div><div class=\"line\"></div><div class=\"line\">import org.apache.commons.lang3.StringUtils;</div><div class=\"line\">import org.springframework.security.crypto.password.PasswordEncoder;</div><div class=\"line\"></div><div class=\"line\">import sun.misc.BASE64Encoder;</div><div class=\"line\"></div><div class=\"line\">public class ChePasswordEncoder implements PasswordEncoder &#123;</div><div class=\"line\">\t// 盐值（加密混淆）</div><div class=\"line\">    private final static String slat = &quot;diasj29er2ur734tuei89u34efdfi30q7u5834tdphf056=-251758&quot;;</div><div class=\"line\">    </div><div class=\"line\">\t/**</div><div class=\"line\">\t * 利用MD5进行加密</div><div class=\"line\">\t * </div><div class=\"line\">\t * @param str 待加密的字符串</div><div class=\"line\">\t * @return 加密后的字符串</div><div class=\"line\">\t * @throws NoSuchAlgorithmException 没有这种产生消息摘要的算法</div><div class=\"line\">\t * @throws UnsupportedEncodingException</div><div class=\"line\">\t */</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic String encode(CharSequence rawPassword) &#123;</div><div class=\"line\">\t\tif (rawPassword == null) &#123;</div><div class=\"line\">\t\t\treturn null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString newstr = null;</div><div class=\"line\">\t\trawPassword = rawPassword + &quot;/&quot; + slat;</div><div class=\"line\">\t\t// 确定计算方法</div><div class=\"line\">\t\tMessageDigest md5;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tmd5 = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class=\"line\">\t\t\tBASE64Encoder base64en = new BASE64Encoder();</div><div class=\"line\">\t\t\t// 加密后的字符串</div><div class=\"line\">\t\t\tnewstr = base64en.encode(md5.digest(rawPassword.toString().getBytes(&quot;utf-8&quot;)));</div><div class=\"line\">\t\t&#125; catch (UnsupportedEncodingException | NoSuchAlgorithmException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;===========================&quot;+newstr);</div><div class=\"line\">\t\treturn newstr;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic boolean matches(CharSequence rawPassword, String encodedPassword) &#123;</div><div class=\"line\">\t\tString encodeedRawPassword = StringUtils.isNotBlank(rawPassword) ? this.encode(rawPassword.toString()) : null;</div><div class=\"line\">\t\tboolean matched = StringUtils.equals(encodeedRawPassword, encodedPassword);</div><div class=\"line\">\t\treturn matched;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"可返回（用户表）更多属性配置\"><a href=\"#可返回（用户表）更多属性配置\" class=\"headerlink\" title=\"可返回（用户表）更多属性配置\"></a>可返回（用户表）更多属性配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">cas.authn.attributeRepository.jdbc[0].singleRow=true</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].order=0</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].url=jdbc:oracle:thin:@127.0.0.1:1521/ORCL</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].username=user_id</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].user=iamsuser</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].password=iamsuser</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].sql=select * from cap_user where user_id=?</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].dialect=org.hibernate.dialect.OracleDialect</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].ddlAuto=none</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].driverClass=oracle.jdbc.driver.OracleDriver</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].leakThreshold=10</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].propagationBehaviorName=PROPAGATION_REQUIRED</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].batchSize=1</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].healthQuery=SELECT 1 from dual</div><div class=\"line\">cas.authn.attributeRepository.jdbc[0].failFast=true</div></pre></td></tr></table></figure>\n<p>这里很多相同的参数配置两遍应该不太友好的，有待推敲；</p>\n<p>jdbc[0]这种 转 yml格式搜不到可行写法，希望有缘人赐教。</p>\n<h3 id=\"不允许使用CAS来认证您访问的目标应用。\"><a href=\"#不允许使用CAS来认证您访问的目标应用。\" class=\"headerlink\" title=\"不允许使用CAS来认证您访问的目标应用。\"></a>不允许使用CAS来认证您访问的目标应用。</h3><p>src/main/resources下添加services文件夹，添加HTTPSandIMAPS-10000001.json(文件名有规则，暂时未知)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;@class&quot;: &quot;org.apereo.cas.services.RegexRegisteredService&quot;,</div><div class=\"line\">\t&quot;serviceId&quot;: &quot;^(http|https|imaps)://.*&quot;,</div><div class=\"line\">\t&quot;name&quot;: &quot;HTTPS and IMAPS&quot;,</div><div class=\"line\">\t&quot;id&quot;: 10000001,</div><div class=\"line\">\t&quot;description&quot;: &quot;This service definition authorizes all application urls that support HTTPS and IMAPS protocols.&quot;,</div><div class=\"line\">\t&quot;evaluationOrder&quot;: 10000,</div><div class=\"line\">\t&quot;attributeReleasePolicy&quot;: &#123;</div><div class=\"line\">\t\t&quot;@class&quot;: &quot;org.apereo.cas.services.ReturnAllAttributeReleasePolicy&quot;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"啰嗦几句\"><a href=\"#啰嗦几句\" class=\"headerlink\" title=\"啰嗦几句\"></a>啰嗦几句</h2><p>本意springboot+shiro集成cas，需要一个cas server，发现相关资料很少，尤其中文好资料。因为大公司都用自己的开发的cas吗。。</p>\n<h2 id=\"待续…\"><a href=\"#待续…\" class=\"headerlink\" title=\"待续…\"></a>待续…</h2><h2 id=\"一些链接\"><a href=\"#一些链接\" class=\"headerlink\" title=\"一些链接\"></a>一些链接</h2><p>本文github：<a href=\"https://github.com/chenhongen/cas-overlay-template-master\" target=\"_blank\" rel=\"external\">点这里</a>；</p>\n<p>官方软文：<a href=\"https://apereo.github.io/2017/03/28/cas5-gettingstarted-overlay/\" target=\"_blank\" rel=\"external\">cas5-gettingstarted-overlay</a>；</p>\n<p>@yuchanghui搭建的server与client：<a href=\"https://github.com/yuchanghui/buyi-sso\" target=\"_blank\" rel=\"external\">buyi-sso</a>；</p>\n<p>系列博客：<a href=\"http://blog.csdn.net/u010475041/article/details/77914728\" target=\"_blank\" rel=\"external\">CAS单点登录</a>；</p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n"},{"title":"忘了再看设计模式-行为型","url":"http://rebey.cn/2017/10/08/忘了再看设计模式-行为型/","content":"<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>选择使用封装好的一系列算法，可相互替换。</p>\n<p>类比：商店[Context]买完衣服买单[Stratege]（现金[Concrete Stratege]、扫码、跑路）。</p>\n<p>VS工厂模式：虽然一个负责创建，一个侧重策略选择。但网上很多工厂模式的实现代码写出了策略模式的效果。尤其是所谓的“多方法工厂”。</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://www.10tiao.com/html/695/201702/2247484591/1.html\" target=\"_blank\" rel=\"external\">用设计模式解构三国是一种什么体验？——Part 3：行为型设计模式（一）</a>；<br><a href=\"http://blog.csdn.net/u011507568/article/details/70238491\" target=\"_blank\" rel=\"external\">策略模式+工厂模式优化if…else if…else if结构</a></p>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p>随着 状态 改变而改变行为。</p>\n<p>类比：商店[Context]选衬衫[Stratege]，选中一件 断码了[Concrete Stratege]，换一件 太贵了;换了一件称心的，买单。</p>\n<p>VS策略模式：虽然都是选择行为，状态模式突出“状态”。</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://yukai.space/2017/08/10/%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/\" target=\"_blank\" rel=\"external\">状态机与状态模式</a></p>\n<h2 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h2><p>多个对象依次处理请求（前者指定后者）。</p>\n<p>类比：搭配服装[Handler]，上衣[Concrete Handler1]选好了选裤子[Concrete Handler2]，裤子选好了选鞋子..；当然你也可以先选裤子再去配搭上衣。</p>\n<p>应用：JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter…</p>\n<p>VS状态模式：状态模式水平，责任链纵向。</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://blog.csdn.net/jason0539/article/details/45091639\" target=\"_blank\" rel=\"external\">Java设计模式之责任链模式、职责链模式</a></p>\n<h2 id=\"中介模式\"><a href=\"#中介模式\" class=\"headerlink\" title=\"中介模式\"></a>中介模式</h2><p>增加中介者对象来解耦互相关联的各个对象。</p>\n<p>类比：网状图转星型拓扑。</p>\n<p>VS代理模式：代理 针对一个对象，为了增加控制等；中介 双方都是多个，为了解耦。</p>\n<p>VS外观模式：外观 明确调用，中介 选择调用（调停类包含选择业务逻辑）；外观 单向；中介 双向。</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://blog.csdn.net/itachi85/article/details/60466829\" target=\"_blank\" rel=\"external\">设计模式（十四）中介者模式</a></p>\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>请求发送者-&gt;命令-&gt;请求执行者</p>\n<p>类比：太一-&gt;进化-&gt;亚古兽</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html\" target=\"_blank\" rel=\"external\">Docs » 行为型模式 » 1. 命令模式</a></p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>多个观察者对象监听一个主题对象。主题对象能主动想所有观察者推送通知。</p>\n<p>类比：被观察者Subscriber：微信公众号(持有订阅者ID为其推送文章)；<br>观察者Observer：订阅者</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://mp.weixin.qq.com/s/j2PTUKnAlO-6hPAyWowiJw\" target=\"_blank\" rel=\"external\">Java设计模式（十一）：观察者模式</a></p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p>顺序遍历</p>\n<p>类比：Iterator</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://10tiao.com/html/710/201702/2650120488/2.html\" target=\"_blank\" rel=\"external\">设计模式（十三）——迭代器模式</a></p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>重写</p>\n<p><strong>推文</strong></p>\n<p><a href=\"https://my.oschina.net/u/2003960/blog/541806\" target=\"_blank\" rel=\"external\">设计模式—-\b模板方法模式UML和实现代码</a></p>\n<h2 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h2><p>备份</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://blog.chinaunix.net/xmlrpc.php?r=blog/article&amp;uid=29140694&amp;id=4127905\" target=\"_blank\" rel=\"external\">【JAVA】设计模式之备忘录模式（Memento模式）的使用分析</a></p>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p>访问者操作集合内不同元素。（标注：有待加强理解）</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://blog.csdn.net/u012124438/article/details/70537203\" target=\"_blank\" rel=\"external\">设计模式学习之访问者模式</a></p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p>翻译</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://blog.csdn.net/chenliguan/article/details/72633487\" target=\"_blank\" rel=\"external\">行为型设计模式-解释器模式</a></p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n"},{"title":"忘了再看设计模式-结构型","url":"http://rebey.cn/2017/10/06/忘了再看设计模式-结构型/","content":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><blockquote>\n<p>我决定插手你的人生，当你的时尚顾问 《阳光宅男》</p>\n</blockquote>\n<p>通过代理对象进行交互(或占位)，强调访问控制（也能增加额外功能，比如：日志）；与被代理对象具有相同接口；</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Proxy%20Pattern.png\" alt=\"代理模式\"></p>\n<p><strong>实现：</strong> 静态、动态、cglib。</p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://blog.csdn.net/rickesy/article/details/59112249\" target=\"_blank\" rel=\"external\">代理模式的再理解–动态代理</a></p>\n<h2 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h2><blockquote>\n<p>黑框的眼镜有几千度，来海边穿西装裤 《阳光宅男》</p>\n</blockquote>\n<p>强调附加额外功能；与被包装对象具有相同接口；</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Decorator%20Pattern.png\" alt=\"装饰者模式\"></p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://www.jianshu.com/p/e309cb7f86a2\" target=\"_blank\" rel=\"external\">王者荣耀之「装饰者模式」</a></p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><blockquote>\n<p>要我打包自己，扮成Hello Kitty 《公主病》</p>\n</blockquote>\n<p>通过适配器，将一个接口（广义）转换成客户希望的另一个接口。</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Adapter%20Pattern.png\" alt=\"适配器模式\"></p>\n<p><strong>推文</strong></p>\n<p>★<a href=\"http://lovedev.org/2017/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/#CLASS\" target=\"_blank\" rel=\"external\">设计模式-适配器模式</a>；</p>\n<p><a href=\"http://wiki.jikexueyuan.com/project/design-pattern-structurized/adapter-four.html\" target=\"_blank\" rel=\"external\">不兼容结构的协调——适配器模式（四）</a></p>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><blockquote>\n<p>老仓库的角落，我们数着 一麻袋的爱跟快乐,初恋的颜色 《麦芽糖》</p>\n</blockquote>\n<p>通过 外观角色 来交互，降低子系统与客户端的耦合度。</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Facade%20Pattern.png\" alt=\"外观模式\"></p>\n<p><strong>推文</strong></p>\n<p>可参看上方系列文章</p>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><blockquote>\n<p>没有地球 太阳还是回绕 《彩虹》</p>\n</blockquote>\n<p>将抽象部分与它的实现部分（两个维度）分离，使它们都可以独立地变化。</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Bridge%20Pattern.png\" alt=\"桥接模式\"></p>\n<p><strong>推文</strong></p>\n<p>可参看上方系列文章</p>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><blockquote>\n<p>曹魏枭雄在 蜀汉多人才 《乱舞春秋》</p>\n</blockquote>\n<p>树形结构，使得无论子节点还是父节点对外暴露的方法相同。</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Composite%20Pattern.png\" alt=\"组合模式\"></p>\n<p><strong>推文</strong></p>\n<p>可参看上方系列文章</p>\n<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><blockquote>\n<p>繁华如三千东流水 我只取一瓢爱了解 《发如雪》</p>\n</blockquote>\n<p>N个单例共享使用;内部状态（不可变部分）、外部状态（变化部分）；形如：字符常量池、数据库连接池；</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Flyweight%20Pattern.png\" alt=\"享元模式\"></p>\n<p><strong>推文</strong></p>\n<p><a href=\"http://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/flyweight.html\" target=\"_blank\" rel=\"external\">Docs » 结构型模式 » 5. 享元模式</a></p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n"},{"title":"忘了再看设计模式-创建型","url":"http://rebey.cn/2017/10/04/忘了再看设计模式-创建型/","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p><strong>概述：</strong></p>\n<blockquote>\n<p>你是我唯一想要的了解。《七里香》</p>\n</blockquote>\n<p>有且仅有一个实例，与能访问它的全局静态方法。</p>\n<p><strong>实现：</strong><br>饿汉、懒汉、双重锁、静态内部类、枚举。</p>\n<p><strong>难点：</strong><br>在考虑线程安全、序列化、反射、克隆、jdk版本、类加载器等情况下，保证唯一性。</p>\n<p><strong>推文：</strong></p>\n<p><a href=\"https://mp.weixin.qq.com/s/wEK3UcHjaHz1x-iXoW4_VQ\" target=\"_blank\" rel=\"external\">那些年，我们一起写过的“单例模式”</a>；</p>\n<p><a href=\"http://www.barryzhang.com/archives/521\" target=\"_blank\" rel=\"external\">Hi，我们再来聊一聊Java的单例吧</a>；</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p><strong>概述：</strong></p>\n<blockquote>\n<p>我喜欢的样子你都有。《甜甜的》</p>\n</blockquote>\n<p>通过工厂类获取实例，而不需要关心复杂的创建过程。</p>\n<p><strong>实现：</strong><br>简单工厂（类内）、多方法工厂（类内方法）、普通工厂（产品子类）、抽象工厂（工厂子类）。</p>\n<p><strong>推文：</strong></p>\n<p><a href=\"http://blog.csdn.net/zxt0601/article/details/52798423\" target=\"_blank\" rel=\"external\">Java经典设计模式之五大创建型模式（附实例和详解）</a>；</p>\n<p><a href=\"http://wiki.jikexueyuan.com/project/design-pattern-creation/simple-two.html\" target=\"_blank\" rel=\"external\">工厂三兄弟之简单工厂模式（一）</a></p>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><p><strong>概述：</strong></p>\n<blockquote>\n<p>手牵手一步两步三步四步望着天。《星晴》</p>\n</blockquote>\n<p>将一个复杂对象的构建与它的表示 分离，使得同样的构建过程可以创建不同的表示。（一步步构建复杂对象）</p>\n<p><strong>推文：</strong></p>\n<p><a href=\"https://innofang.github.io/2017/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%8C-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/\" target=\"_blank\" rel=\"external\">设计模式(二):建造者模式</a>；</p>\n<p><a href=\"http://wiki.jikexueyuan.com/project/java-design-pattern/builder-pattern.html\" target=\"_blank\" rel=\"external\">建造者模式</a></p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p><strong>概述：</strong></p>\n<blockquote>\n<p>听我说中药苦，抄袭应该更苦。《本草纲目》</p>\n</blockquote>\n<p>拷贝对象。（不会触发原构造方法；注意浅拷贝与深拷贝）</p>\n<p><strong>推文：</strong></p>\n<p><a href=\"http://wiki.jikexueyuan.com/project/java-design-pattern/prototype-pattern.html\" target=\"_blank\" rel=\"external\">原型模式</a></p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n"},{"title":"LaTex","url":"http://rebey.cn/2017/09/27/LaTex/","content":"<h2 id=\"LaTex\"><a href=\"#LaTex\" class=\"headerlink\" title=\"LaTex\"></a>LaTex</h2><p>说起LaTex，又会扯出Tex、MikTeX、CJK等一系列东西。这并不是我们关注的重点，然而如果你有时间，可以当个睡前故事看看这篇<a href=\"http://www.ctex.org/documents/shredder/tex_frame.html\" target=\"_blank\" rel=\"external\">文章</a>。我们只需要知道:</p>\n<ul>\n<li>LaTex有一套自成体系的语法，常用于科研生产、试卷等文档排版。</li>\n<li>支持复杂公式，可通过百度的<a href=\"http://gongshi.baidu.com/latex.html\" target=\"_blank\" rel=\"external\">Kity Formula</a>在线体验下。</li>\n</ul>\n<h2 id=\"Pandoc\"><a href=\"#Pandoc\" class=\"headerlink\" title=\"Pandoc\"></a><a href=\"http://www.pandoc.org/\" target=\"_blank\" rel=\"external\">Pandoc</a></h2><p>支持LaTex/Markdown/Html/Docx/pdf等多种格式文档相互转换。<br>在线体验戳<a href=\"http://www.pandoc.org/try\" target=\"_blank\" rel=\"external\">Here</a>。<br>需要在电脑安装msi程序，通过控制台指令可调用(也支持Linux/Mac)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pandoc rebey.tex -o tex.pdf --latex-engine=xelatex -V mainfont=&quot;SimSun&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"JTex\"><a href=\"#JTex\" class=\"headerlink\" title=\"JTex\"></a>JTex</h2><p>usajusaj封装的Java生成.tex文件的工具包。关于Java操作Latex生成Word的解决方案目前采取的是通过JTex生成.tex文件后，通过Pandoc转成doc/docx。相关的资料极少，而且基本好几年前的。这里我按这个思路写了Demo。</p>\n<p>Github传送点<a href=\"https://github.com/chenhongen/jtex\" target=\"_blank\" rel=\"external\">Here</a>。</p>\n<p>注意：插入公式时，需要将LaTex表达式放在两个“$”之间。</p>\n<h2 id=\"硬伤\"><a href=\"#硬伤\" class=\"headerlink\" title=\"硬伤\"></a>硬伤</h2><ul>\n<li><p>没有像Office那样图形化的操作页面。以至于在您不了解LaTex语法的情况下，想要编写一个符合需求的文档需要花费大量的精力去了解指令，还拥有类似css的样式.sty之类的。</p>\n</li>\n<li><p>使用Pandoc将LaTex转换成pdf的效果还是不错的，但是转成doc时效果存在一定偏差。</p>\n</li>\n<li><p>即便如此，LaTex是强大的，只是缺少拓展者。</p>\n</li>\n</ul>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p><a href=\"https://developer.myscript.com/get-started/web\" target=\"_blank\" rel=\"external\">Myscript</a>，支持手写输入公式，可导出LaTex/MathML/Image/Binary data等。<br><img src=\"https://sfault-image.b0.upaiyun.com/262/473/262473302-59cb144a7fa99_articlex\" alt=\"Myscript.png\"></p>\n<blockquote>\n<p>更多有意思的内容，欢迎访问<a href=\"http://rebey.cn\">rebey.cn</a></p>\n</blockquote>\n"},{"title":"Java基于Freemarker模板导出Word","url":"http://rebey.cn/2017/09/26/Java基于Freemarker模板导出Word/","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ol>\n<li>下载<a href=\"http://mvnrepository.com/artifact/org.freemarker/freemarker/2.3.23\" target=\"_blank\" rel=\"external\">Freemarker</a> jar；</li>\n<li>wps/office创建.doc文件；</li>\n<li>编辑模板内容后另存为.xml(注意wps存在两种.xml结尾的文件，请按下图选择);<br><img src=\"https://sfault-image.b0.upaiyun.com/170/767/1707673864-59ca51abf1c11_articlex\" alt=\"clipboard.png\"></li>\n<li>修改模板后缀名为.ftl；</li>\n<li>为了查看方便，建议先将内容格式化下（在线XML格式化即可）；</li>\n<li>将需要动态变化的值替换成,${xxx} 来占位（支持循环，所以批量数据不需要挨个替换）；</li>\n</ol>\n<h2 id=\"土亢\"><a href=\"#土亢\" class=\"headerlink\" title=\"土亢\"></a>土亢</h2><ul>\n<li>图片使用base64编码，放在“yyy”的位置：“<w:bindata w:name=\"wordml://xxx.png\">yyy</w:bindata>”</li>\n<li>当文档存在图片时，尤其是多张图片需要动态读取时，“wordml://${xxx}.png”中的xxx需要相应动态变化，不然图片会重复哦。</li>\n<li>单元格合并时,可在ftl里写相应判断，同上行内容使用“<w:vmerge>”或者“<w:vmerge w:val=\"continue\">”来表示合并，否则，使用“<w:vmerge w:val=\"restart\">”来另起新行。这里注意的是“vmerge”都是小写，学习过程中在网上看到是“vMerge”，合并不起作用，排查了半天错。<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#assign</span> <span class=\"attr\">tempName</span>=<span class=\"string\">\"\"</span>/&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#if</span> <span class=\"attr\">tempName</span>!=<span class=\"string\">Table.name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">w:vmerge</span> <span class=\"attr\">w:val</span>=<span class=\"string\">\"restart\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">#assign</span> <span class=\"attr\">tempName</span>=<span class=\"string\">Table.name/</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">#else</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">w:vmerge</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">#if</span>&gt;</span></div></pre></td></tr></table></figure>\n</w:vmerge></w:vmerge></w:vmerge></li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p><a href=\"https://github.com/chenhongen/Freemarker2Word\" target=\"_blank\" rel=\"external\">github传送门</a></p>\n<blockquote>\n<p>更多有意思的内容，欢迎访问<a href=\"http://rebey.cn\">rebey.cn</a></p>\n</blockquote>\n"},{"title":"前端 打call","url":"http://rebey.cn/2017/08/27/前端 打call/","content":"<h1 id=\"RAW-React-Router-Ant-design-Webpack\"><a href=\"#RAW-React-Router-Ant-design-Webpack\" class=\"headerlink\" title=\"RAW = React(Router) + Ant design + Webpack\"></a>RAW = React(Router) + Ant design + Webpack</h1><h2 id=\"GITHUB\"><a href=\"#GITHUB\" class=\"headerlink\" title=\"GITHUB\"></a>GITHUB</h2><p><a href=\"https://github.com/chenhongen/raw-ie8\" target=\"_blank\" rel=\"external\">raw-ie8</a><br>兼容IE8，简单的前端框架半成品。</p>\n<h2 id=\"·-20170826\"><a href=\"#·-20170826\" class=\"headerlink\" title=\"· 20170826\"></a>· 20170826</h2><p>是的，最近在捣鼓SpringBoot。数据查出来抛到前端觉得没有一个好看的页面展示不得劲。结果一路跑偏到前端，一入前端深似海。因为一直想着尽量兼容到ie8版本，可以给公司项目用了。过程遇到了很多问题（readme记录部分），目前的状态在webpack上能跑起来，部署到nginx之类的应该没有问题。而我尝试与maven结合起来，参照《<a href=\"http://justincalleja.com/2016/04/17/serving-a-webpack-bundle-in-spring-boot/\" target=\"_blank\" rel=\"external\">Serving a Webpack bundle in Spring Boot</a>》搭建一个能利用webpack自动打jar包供Springboot使用的框架，之后将“raw-ie”迁移过去。然而奇怪的是，ie8上失败了（火狐,谷歌正常）。这是一个悲伤的故事。感觉整个人都憔悴了。</p>\n<p>按趋势来说，前后端分离必然还是需要各自拥有自己的服务器。这里只是天马行空，恰巧也有前人这么想并这么做了。现在的选择，要么抛弃阿斗IE8，要么单独给raw整个服务器适用于webpack打包后，要么直到找到问题所在，要么睡觉先。。其实还是最终目标才是选择的依据。目前可以先在webpack-dev-server上继续跑raw-ie8，在eclipse上继续往下整合SpringBoot+shrio+redis…</p>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/347/226/347226979-59a19bc397784_articlex\" alt=\"演示\"></p>\n<h2 id=\"·-20170827\"><a href=\"#·-20170827\" class=\"headerlink\" title=\"· 20170827\"></a>· 20170827</h2><p>今天简单的学习了下nginx，把webpack打包好的使用nginx管理。结果发现和昨天使用springboot一体化整合的效果一样：“找不到标识符”。失败并不可怕，反而给了我重新定位错误的方向。未打包正常，打包后不管在什么平台的IE8都出错了，这不是告诉我问题出在打包上吗？然后就把UglifyJsPlugin注释掉（或者去掉-p）进行尝试。果然页面出来了，只不过存在样式问题。UglifyJs用于压缩js，去掉之后从原来700多K飙为1.92M。然后参照<a href=\"http://www.zuojj.com/archives/2157.html\" target=\"_blank\" rel=\"external\">FED实验室</a>的一篇文章加上了UglifyJs的一些参数，降到1.09M。但是在I8下的样式问题依然存在(- -)。对这个问题感兴趣的大神可以从上文的GITHUB链接down下来打包在ie8下跑起来看看。不过，应该没人感兴趣。。。</p>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/225/861/2258611539-59a2ab6aa5a1a_articlex\" alt=\"样式BUG\"></p>\n"},{"title":"【正则表达式】之Possessive Quantifiers","url":"http://rebey.cn/2017/08/07/【正则表达式】之Possessive Quantifiers/","content":"<p>针对“*”、“+”、“?”等限定符都是贪婪的（尽可能多的匹配字符），通过在最后追加“+”或“?”量词可改变贪婪性。本篇主要解疑正则表达式的“占有型量词”（Possessive Quantifiers）。</p>\n<h2 id=\"Greediness（贪婪型）\"><a href=\"#Greediness（贪婪型）\" class=\"headerlink\" title=\"Greediness（贪婪型）\"></a>Greediness（贪婪型）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pattern p = Pattern.compile(<span class=\"string\">\"\\\\[.+\\\\]\\\\[.+\\\\]\"</span>);</div><div class=\"line\">Matcher m = p.matcher(<span class=\"string\">\"[che][1]'s blog is [rebey.cn][2],and built in [2016][3].\"</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(m.find()) &#123;</div><div class=\"line\">    System.out.println(m.group());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果：[che][1]'s blog is [rebey.cn][2],and built in [2016][3]</span></div></pre></td></tr></table></figure>\n<p>在不做任何额外处理情况下，正则表达式默认是贪婪型的。贪婪型一次读取所有字符进行匹配。<br><strong>以下是匹配过程猜想：</strong><br>“\\[.+”先遍历到字符“.”时发现不匹配了，开始往左回溯，得到“[che…]”;<br>继续往左回溯，像这样“[che…][3]”，因此就有了以上的输出结果。</p>\n<h2 id=\"Reluctant-Laziness（勉强型）\"><a href=\"#Reluctant-Laziness（勉强型）\" class=\"headerlink\" title=\"Reluctant/Laziness（勉强型）\"></a>Reluctant/Laziness（勉强型）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pattern p1 = Pattern.compile(<span class=\"string\">\"\\\\[.+?\\\\]\\\\[.+?\\\\]\"</span>);</div><div class=\"line\">Matcher m1 = p1.matcher(<span class=\"string\">\"[che][1]'s blog is [rebey.cn][2],and built in [2016][3].\"</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(m1.find()) &#123;</div><div class=\"line\">\tSystem.out.println(m1.group());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果：</span></div><div class=\"line\"><span class=\"comment\">//\t[che][1]</span></div><div class=\"line\"><span class=\"comment\">//\t[rebey.cn][2]</span></div><div class=\"line\"><span class=\"comment\">//\t[2016][3]</span></div></pre></td></tr></table></figure>\n<p>在原有的“.+”之后加个“？”，就成为了勉强型。它将从左至右依次读取进行匹配，直到字符串结束。</p>\n<h2 id=\"Possessive（占有型）\"><a href=\"#Possessive（占有型）\" class=\"headerlink\" title=\"Possessive（占有型）\"></a>Possessive（占有型）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pattern p2 = Pattern.compile(<span class=\"string\">\"\\\\[.++\\\\]\\\\[.++\\\\]\"</span>);</div><div class=\"line\">Matcher m2 = p2.matcher(<span class=\"string\">\"[che][1]'s blog is [rebey.cn][2],and built in [2016][3].\"</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(m2.find()) &#123;</div><div class=\"line\">\tSystem.out.println(m2.group());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果：匹配不到</span></div></pre></td></tr></table></figure>\n<p>在原有的“.+”之后加个“+”，就成为了占有型。它也是一次读取所有字符串进行匹配，区别在于它不回溯。<br><strong>以下是匹配过程猜想：</strong><br>“\\[.+”匹配“[che…”直到最后字符“.”不匹配，立即结束。</p>\n<h2 id=\"x-≈-gt-x\"><a href=\"#x-≈-gt-x\" class=\"headerlink\" title=\"x+ ≈ (?&gt;x) \"></a>x+ ≈ (?&gt;x) </h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pattern p3 = Pattern.compile(<span class=\"string\">\"\\\\[.++\"</span>);</div><div class=\"line\">Matcher m3 = p3.matcher(<span class=\"string\">\"[che][1]'s blog is [rebey.cn][2],and built in [2016][3].\"</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(m3.find()) &#123;</div><div class=\"line\">\tSystem.out.println(m3.group());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Pattern p4 = Pattern.compile(<span class=\"string\">\"(?&gt;(\\\\[.+))\"</span>);</div><div class=\"line\">Matcher m4 = p4.matcher(<span class=\"string\">\"[che][1]'s blog is [rebey.cn][2],and built in [2016][3].\"</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(m4.find()) &#123;</div><div class=\"line\">\tSystem.out.println(m4.group());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">结果皆为：[che][<span class=\"number\">1</span>]<span class=\"string\">'s blog is [rebey.cn][2],and built in [2016][3].</span></div></pre></td></tr></table></figure>\n<p>注意括号。</p>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><blockquote>\n<p>Possessive quantifiers are a way to prevent the regex engine from trying all permutations.</p>\n</blockquote>\n<p>占有量词是一种用来组织正则表达式尝试所有排列组合的方式。（即不回溯）</p>\n<blockquote>\n<p>With a possessive quantifier, the deal is all or nothing.<br>使用占有量词只有两种结果，全匹配或者空匹配。<br>The main practical benefit of possessive quantifiers is to speed up your regular expression.<br>占有量词的主要实际意义是加速你的正则表达式。</p>\n</blockquote>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.regular-expressions.info/possessive.html\" target=\"_blank\" rel=\"external\">Regex Tutorial - Possessive Quantifiers</a></p>\n"},{"title":"Oracle Function Result Cache","url":"http://rebey.cn/2017/07/26/Oracle Function Result Cache/","content":"<h2 id=\"作用与用法\"><a href=\"#作用与用法\" class=\"headerlink\" title=\"作用与用法\"></a>作用与用法</h2><p>在Function中使用数据集缓存能够减少函数内部查询调用次数，从而提高效率，尤其适用于数据变动不频繁（如：组织机构）的数据。属于11g新特性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE OR REPLACE FUNCTION getOperatorNames (v_empIds varchar)</div><div class=\"line\">   RETURN VARCHAR RESULT_CACHE</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>在返回值、类型 后加“RESULT_CACHE”即可。</p>\n<h2 id=\"存放与生命周期\"><a href=\"#存放与生命周期\" class=\"headerlink\" title=\"存放与生命周期\"></a>存放与生命周期</h2><p>整合在当前数据源，随着当前数据事物发生而重置。（11g release 1需要额外添加“RELIES_ON”【如：result_cache relies_on (tablename)】，11g release 2不需要）</p>\n<blockquote>\n<p>cached results can be directly coupled to their underlying data sources.This means that cached results are invalidated and regenerated when transactions occur against the underlying data. </p>\n</blockquote>\n<p>当函数重建时，原缓存数据状态置为无效，新的缓存数据会生成。（缓存空间通过类似“最近最少使用”算法维护）可通过以下sql文查看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT id</div><div class=\"line\">  ,      name</div><div class=\"line\">  ,      type</div><div class=\"line\">  ,      status</div><div class=\"line\">  ,      invalidations</div><div class=\"line\">  FROM   v$result_cache_objects</div><div class=\"line\">  ORDER  BY</div><div class=\"line\">         id;</div></pre></td></tr></table></figure></p>\n<h2 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT name, value</div><div class=\"line\">  FROM   v$result_cache_statistics</div><div class=\"line\">  WHERE  name IN (&apos;Create Count Success&apos;,&apos;Find Count&apos;);</div></pre></td></tr></table></figure>\n<p>‘Create Count Success’ 可以理解为缓存个数，’Find Count’为命中次数。当然，v$result_cache_statistics中还有其他很多信息，比如缓存大小。</p>\n<h2 id=\"一些特性\"><a href=\"#一些特性\" class=\"headerlink\" title=\"一些特性\"></a>一些特性</h2><p>执行计划中不统计Function Result Cache；<br>支持跨回话；<br>更多细节可以查看：<a href=\"http://www.oracle-developer.net/display.php?id=504\" target=\"_blank\" rel=\"external\">pl/sql function result cache in 11g</a></p>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><p>今天项目一个查询页面加载太慢了，数据量大用户体验差。其中有个根据人员ID查询名称的function就占用了0.3~0.4s，不能忍啊。心想有没类似redis的缓存的做法，通过搜索找到了result cache并应用了。效果甚佳，特此记录。</p>\n<p>oracle水很深，我们还只是浮游生物。</p>\n<blockquote>\n<p>更多有意思的内容，欢迎访问<a href=\"http://rebey.cn\">rebey.cn</a></p>\n</blockquote>\n"},{"title":"你有freestatic吗？","url":"http://rebey.cn/2017/07/22/你有freestatic吗？/","content":"<h2 id=\"Demo1\"><a href=\"#Demo1\" class=\"headerlink\" title=\"Demo1\"></a>Demo1</h2><p>来自<a href=\"http://blog.csdn.net/u011212549/article/details/53399835\" target=\"_blank\" rel=\"external\">关于java中static一个有意思的小案例</a>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Employee employee = <span class=\"keyword\">new</span> Employee();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count1 = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Employee</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        count1++;</div><div class=\"line\">        count2++;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Employee <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>  employee;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLoader</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        Employee employee = Employee.getInstance();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"count1-------\"</span>+employee.count1);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"count2-------\"</span>+employee.count2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果为：<br>count1——-0<br>count2——-1</p>\n<p><img src=\"/img/bVRnZF\" alt=\"clipboard.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count1 = <span class=\"number\">2</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Employee</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"init count1-------\"</span>+count1);  </div><div class=\"line\">    System.out.println(<span class=\"string\">\"init count2-------\"</span>+count2);  </div><div class=\"line\">    count1++;</div><div class=\"line\">    count2++;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我们在构造方法中加入两个输出，输出结果为：<br>init count1——-0<br>init count2——-0<br>count1——-2<br>count2——-1</p>\n<p>你也发现了吧，此时count1尚未初始化赋值。即new Employee()先于count1 = 2执行。<br>因此解决这个demo混淆的最好方法就是将静态变量定义在方法之前。这样是我们平常编码的一种好习惯吧。</p>\n<h2 id=\"Demo2\"><a href=\"#Demo2\" class=\"headerlink\" title=\"Demo2\"></a>Demo2</h2><p>来自<a href=\"http://mabusyao.iteye.com/blog/944565\" target=\"_blank\" rel=\"external\">Java有意思的知识点</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent static say\"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent say\"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child static say\"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child say\"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverrideTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Parent p = <span class=\"keyword\">new</span> Child();  </div><div class=\"line\">        System.out.println(p.say());  </div><div class=\"line\">        System.out.println(p.say2());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：<br>parent static say<br>child say</p>\n<p>是你想的那样吗？</p>\n<blockquote>\n<p>所谓静态方法，并不仅仅指该方法在所有实例中只有一份，同时也指该方法是“静态”加载的，即在编译期就已决定其行为。此处p的静态类型为Parent，所以它所调用的方法也在编译期和Parent的say()方法绑定。</p>\n</blockquote>\n<p>《Think In Java》8.2小节也有类似的栗子，其结论是“静态方法不具有多态性”。</p>\n<h2 id=\"Demo3\"><a href=\"#Demo3\" class=\"headerlink\" title=\"Demo3\"></a>Demo3</h2><p>来自<a href=\"http://blog.leanote.com/post/akioss/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88java%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5%EF%BC%89\" target=\"_blank\" rel=\"external\">一个有趣的问题（java静态字段）</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethodA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> String name = <span class=\"string\">\"rebey.cn\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethodB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String name = <span class=\"string\">\"rebey.cn\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>论述的问题大致是说以上两个类中各有几个方法？本质其实就是有无final时的区别。怎样，心中有答案了吗？</p>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 修饰</div><div class=\"line\"> * 属性</div><div class=\"line\"> * 方法</div><div class=\"line\"> * 对象</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 类加载时，实例化前加载一次；；</div><div class=\"line\"> * 可通过类名直接调用或实例调用，且所有实例共享；</div><div class=\"line\"> * </div><div class=\"line\"> * 此外，静态方法中不能用this和super关键字，</div><div class=\"line\"> * 不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，</div><div class=\"line\"> * 只能访问所属类的静态成员变量和成员方法;</div><div class=\"line\"> * </div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h2 id=\"还有什么玩法\"><a href=\"#还有什么玩法\" class=\"headerlink\" title=\"还有什么玩法\"></a>还有什么玩法</h2><p><a href=\"http://www.cnblogs.com/dotgua/p/6354151.html?utm_source=itdadao&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">静态导包</a>；</p>\n<blockquote>\n<p>本文不定期更新中…<br>更多有意思的内容，欢迎访问<a href=\"http://rebey.cn\">rebey.cn</a></p>\n</blockquote>\n"},{"title":"是你眼中的泛型吗？","url":"http://rebey.cn/2017/07/07/是你眼中的泛型吗？/","content":"<p>继<a href=\"http://rebey.cn/2017/06/24/%EF%BC%9F%20extends%20T%E4%B8%8E%EF%BC%9F%20super%20T/\">《？ extends T与？ super T》</a>之后，我们再聊聊泛型。</p>\n<h2 id=\"Demo-1\"><a href=\"#Demo-1\" class=\"headerlink\" title=\"Demo 1\"></a>Demo 1</h2><p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Generator.png\" alt=\"1\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Generator</span> </span>&#123;</div><div class=\"line\">\t&lt;T&gt; <span class=\"function\">T <span class=\"title\">next</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一种解决方法，在方法返回类型前加“<t>”使其成为一个泛型方法。</t></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Generator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\">T <span class=\"title\">next</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第二种解决方法，在接口名后加“<t>”使其成为一个泛型接口。</t></p>\n<p>泛型类/接口在使用前，必须先指名参数类型，其中除了泛型方法外的泛型参数都将是所指定的类型。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 泛型接口与其子类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Generator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\">T <span class=\"title\">next</span><span class=\"params\">(T t)</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(T t)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubGenerator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Generator</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">next</span><span class=\"params\">(String t)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String t)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 含有泛型方法的接口及其子类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Generator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\">T <span class=\"title\">next</span><span class=\"params\">(T t)</span></span>;</div><div class=\"line\">\t&lt;U&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(U t)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubGenerator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Generator</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">next</span><span class=\"params\">(String t)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(U t)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Demo-2\"><a href=\"#Demo-2\" class=\"headerlink\" title=\"Demo 2\"></a>Demo 2</h2><p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/StaticGenerator.png\" alt=\"2\"></p>\n<p>即静态方法无法访问泛型类上定义的泛型，此时采用泛型方法可解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正确做法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticGenerator</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">rebey</span><span class=\"params\">(T t)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Demo-3\"><a href=\"#Demo-3\" class=\"headerlink\" title=\"Demo 3\"></a>Demo 3</h2><p>在《深入理解Java虚拟机 JVM高级特性与最佳实践（高清完整版）》P271 介绍了“当泛型遇见重载”的例子。得出的结论是：</p>\n<blockquote>\n<p>两个方法如果有相同的名称和特征签名，但返回值不同，那他们也是可以合法地共存于一个Class文件中的。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">url</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"rebey.cn\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">url</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然而以上代码是无法编译通过的。因为此书出版时还未发布JDK7，因此其实只有JDK1.6及以下才能编译通过。随着时间的推移，原来错的可能所以还是按我们原来的理解来解读重载就好了。同名方法参数个数、顺序、类型不同，与返回值类型无关。</p>\n<h2 id=\"Demo-4\"><a href=\"#Demo-4\" class=\"headerlink\" title=\"Demo 4\"></a>Demo 4</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utilities</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">HashSet&lt;T&gt; <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;T&gt;(size);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">( HashSet&lt;String&gt; h)</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">for</span> (String s : h) System.out.println(s);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultGerneric</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Utilities.print(Utilities.create(<span class=\"number\">10</span>));    <span class=\"comment\">// error in Java 5,6,7 ; fine in Java 8</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是来自<a href=\"http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ403\" target=\"_blank\" rel=\"external\">GenericsFAQ403</a>中的一个例子。笔者在java7上测试了，如愿的看到了错误提示：“The method print(HashSet<string>) in the type Utilities is not applicable for the arguments (HashSet<object>)”。由于Utilities.create方法未指定具体类型，默认转为Object，所以Utilities.print此时无法接收其作为String类型的参数。而在Java8版本的增加了类型推断(type argument inference)，能够根据赋值符号左边值类型自动推断出右边。</object></string></p>\n<p>此外，通过显示指定参数类型也能够解决上述问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultGerneric</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t    Utilities.print(Utilities.&lt;String&gt;create(<span class=\"number\">10</span>));<span class=\"comment\">//点操作符与方法名之间</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在《Think In Java》4th中泛型章节也提到了相似的例子（P363）。</p>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><p>通过几个泛型的例子，我们看到：随着时间的推移，对的可能错，错的亦能对。</p>\n<p>这不是很有趣的一件事吗？</p>\n<p>待续…</p>\n<hr>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n"},{"title":"自定义类加载器","url":"http://rebey.cn/2017/07/02/自定义类加载器/","content":"<p>这周在看《深入理解Java虚拟机 JVM高级特性与最佳实践（高清完整版）》，就地取材写写第7章中提到的类加载器。以下源码截自java8。</p>\n<h2 id=\"delegation-model\"><a href=\"#delegation-model\" class=\"headerlink\" title=\"delegation model\"></a>delegation model</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &lt;p&gt; The &lt;tt&gt;ClassLoader&lt;/tt&gt; class uses a delegation model to search for</div><div class=\"line\">* classes and resources.  Each instance of &lt;tt&gt;ClassLoader&lt;/tt&gt; has an</div><div class=\"line\">* associated parent class loader.  When requested to find a class or</div><div class=\"line\">* resource, a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance will delegate the search for the</div><div class=\"line\">* class or resource to its parent class loader before attempting to find the</div><div class=\"line\">* class or resource itself.  The virtual machine's built-in class loader,</div><div class=\"line\">* called the \"bootstrap class loader\", does not itself have a parent but may</div><div class=\"line\">* serve as the parent of a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance.</div></pre></td></tr></table></figure>\n<p>截取自源码开篇注释。“delegation model”大部分文章译为“双亲委派模型”（个人感觉不是很贴切，“双”字很容易产生误解），阐述了一种类加载顺序关系。请求查找类或资源时，ClassLoader实例会先交给父级类加载器处理（组合实现，非继承），依次类推直到”bootstrap class loader”，父级无法处理（在其范围内找不到对应类/资源）了再由自己加载。据说这样可以避免同名类引发的安全隐患。类加载顺序如下图。</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/ClassLoader.png\" alt=\"image\"></p>\n<h2 id=\"loadClass-–-gt-findClass\"><a href=\"#loadClass-–-gt-findClass\" class=\"headerlink\" title=\"loadClass –&gt; findClass\"></a>loadClass –&gt; findClass</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Loads the class with the specified &lt;a href=\"#name\"&gt;binary name&lt;/a&gt;.</div><div class=\"line\"> * This method searches for classes in the same manner as the &#123;<span class=\"doctag\">@link</span></div><div class=\"line\"> * #loadClass(String, boolean)&#125; method.  It is invoked by the Java virtual</div><div class=\"line\"> * machine to resolve class references.  Invoking this method is equivalent</div><div class=\"line\"> * to invoking &#123;<span class=\"doctag\">@link</span> #loadClass(String, boolean) &lt;tt&gt;loadClass(name,</div><div class=\"line\"> * false)&lt;/tt&gt;&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  name</div><div class=\"line\"> *         The &lt;a href=\"#name\"&gt;binary name&lt;/a&gt; of the class</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  The resulting &lt;tt&gt;Class&lt;/tt&gt; object</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>  ClassNotFoundException</div><div class=\"line\"> *          If the class was not found</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; loadClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> loadClass(name, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Loads the class with the specified &lt;a href=\"#name\"&gt;binary name&lt;/a&gt;.  The</div><div class=\"line\"> * default implementation of this method searches for classes in the</div><div class=\"line\"> * following order:</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;ol&gt;</div><div class=\"line\"> *</div><div class=\"line\"> *   &lt;li&gt;&lt;p&gt; Invoke &#123;<span class=\"doctag\">@link</span> #findLoadedClass(String)&#125; to check if the class</div><div class=\"line\"> *   has already been loaded.  &lt;/p&gt;&lt;/li&gt;</div><div class=\"line\"> *</div><div class=\"line\"> *   &lt;li&gt;&lt;p&gt; Invoke the &#123;<span class=\"doctag\">@link</span> #loadClass(String) &lt;tt&gt;loadClass&lt;/tt&gt;&#125; method</div><div class=\"line\"> *   on the parent class loader.  If the parent is &lt;tt&gt;null&lt;/tt&gt; the class</div><div class=\"line\"> *   loader built-in to the virtual machine is used, instead.  &lt;/p&gt;&lt;/li&gt;</div><div class=\"line\"> *</div><div class=\"line\"> *   &lt;li&gt;&lt;p&gt; Invoke the &#123;<span class=\"doctag\">@link</span> #findClass(String)&#125; method to find the</div><div class=\"line\"> *   class.  &lt;/p&gt;&lt;/li&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;/ol&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt; If the class was found using the above steps, and the</div><div class=\"line\"> * &lt;tt&gt;resolve&lt;/tt&gt; flag is true, this method will then invoke the &#123;<span class=\"doctag\">@link</span></div><div class=\"line\"> * #resolveClass(Class)&#125; method on the resulting &lt;tt&gt;Class&lt;/tt&gt; object.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt; Subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; are encouraged to override &#123;<span class=\"doctag\">@link</span></div><div class=\"line\"> * #findClass(String)&#125;, rather than this method.  &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt; Unless overridden, this method synchronizes on the result of</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #getClassLoadingLock &lt;tt&gt;getClassLoadingLock&lt;/tt&gt;&#125; method</div><div class=\"line\"> * during the entire class loading process.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  name</div><div class=\"line\"> *         The &lt;a href=\"#name\"&gt;binary name&lt;/a&gt; of the class</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  resolve</div><div class=\"line\"> *         If &lt;tt&gt;true&lt;/tt&gt; then resolve the class</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  The resulting &lt;tt&gt;Class&lt;/tt&gt; object</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>  ClassNotFoundException</div><div class=\"line\"> *          If the class could not be found</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</div><div class=\"line\">    <span class=\"keyword\">throws</span> ClassNotFoundException</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</div><div class=\"line\">        <span class=\"comment\">// First, check if the class has already been loaded</span></div><div class=\"line\">        <span class=\"comment\">// VM未加载返回null；已加载返回类对象</span></div><div class=\"line\">        Class&lt;?&gt; c = findLoadedClass(name);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 系统计时器的当前值(纳秒)</span></div><div class=\"line\">            <span class=\"keyword\">long</span> t0 = System.nanoTime();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    c = parent.loadClass(name, <span class=\"keyword\">false</span>); <span class=\"comment\">// 父</span></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    c = findBootstrapClassOrNull(name); <span class=\"comment\">// 根</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">                <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></div><div class=\"line\">                <span class=\"comment\">// from the non-null parent class loader</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// If still not found, then invoke findClass in order</span></div><div class=\"line\">                <span class=\"comment\">// to find the class.</span></div><div class=\"line\">                <span class=\"keyword\">long</span> t1 = System.nanoTime();</div><div class=\"line\">                c = findClass(name);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// this is the defining class loader; record the stats</span></div><div class=\"line\">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</div><div class=\"line\">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</div><div class=\"line\">                sun.misc.PerfCounter.getFindClasses().increment();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 链接一个指定的类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (resolve) &#123;</div><div class=\"line\">            resolveClass(c);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Finds the class with the specified &lt;a href=\"#name\"&gt;binary name&lt;/a&gt;.</div><div class=\"line\"> * This method should be overridden by class loader implementations that</div><div class=\"line\"> * follow the delegation model for loading classes, and will be invoked by</div><div class=\"line\"> * the &#123;<span class=\"doctag\">@link</span> #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;&#125; method after checking the</div><div class=\"line\"> * parent class loader for the requested class.  The default implementation</div><div class=\"line\"> * throws a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  name</div><div class=\"line\"> *         The &lt;a href=\"#name\"&gt;binary name&lt;/a&gt; of the class</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  The resulting &lt;tt&gt;Class&lt;/tt&gt; object</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>  ClassNotFoundException</div><div class=\"line\"> *          If the class could not be found</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@since</span>  1.2</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException(name);</div><div class=\"line\">    <span class=\"comment\">// 由自定义类加载器重载</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>体现了以上所述的类加载逻辑。findClass为自定义类加载器提供了入口。</p>\n<h2 id=\"defineClass\"><a href=\"#defineClass\" class=\"headerlink\" title=\"defineClass\"></a>defineClass</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;,</div><div class=\"line\"> * with an optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.  If the domain is</div><div class=\"line\"> * &lt;tt&gt;null&lt;/tt&gt;, then a default domain will be assigned to the class as</div><div class=\"line\"> * specified in the documentation for &#123;<span class=\"doctag\">@link</span> #defineClass(String, byte[],</div><div class=\"line\"> * int, int)&#125;.  Before the class can be used it must be resolved.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt; The first class defined in a package determines the exact set of</div><div class=\"line\"> * certificates that all subsequent classes defined in that package must</div><div class=\"line\"> * contain.  The set of certificates for a class is obtained from the</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> java.security.CodeSource &lt;tt&gt;CodeSource&lt;/tt&gt;&#125; within the</div><div class=\"line\"> * &lt;tt&gt;ProtectionDomain&lt;/tt&gt; of the class.  Any classes added to that</div><div class=\"line\"> * package must contain the same set of certificates or a</div><div class=\"line\"> * &lt;tt&gt;SecurityException&lt;/tt&gt; will be thrown.  Note that if</div><div class=\"line\"> * &lt;tt&gt;name&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this check is not performed.</div><div class=\"line\"> * You should always pass in the &lt;a href=\"#name\"&gt;binary name&lt;/a&gt; of the</div><div class=\"line\"> * class you are defining as well as the bytes.  This ensures that the</div><div class=\"line\"> * class you are defining is indeed the class you think it is.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt; The specified &lt;tt&gt;name&lt;/tt&gt; cannot begin with \"&lt;tt&gt;java.&lt;/tt&gt;\", since</div><div class=\"line\"> * all classes in the \"&lt;tt&gt;java.*&lt;/tt&gt; packages can only be defined by the</div><div class=\"line\"> * bootstrap class loader.  If &lt;tt&gt;name&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, it</div><div class=\"line\"> * must be equal to the &lt;a href=\"#name\"&gt;binary name&lt;/a&gt; of the class</div><div class=\"line\"> * specified by the byte array \"&lt;tt&gt;b&lt;/tt&gt;\", otherwise a &#123;<span class=\"doctag\">@link</span></div><div class=\"line\"> * NoClassDefFoundError &lt;tt&gt;NoClassDefFoundError&lt;/tt&gt;&#125; will be thrown. &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  name</div><div class=\"line\"> *         The expected &lt;a href=\"#name\"&gt;binary name&lt;/a&gt; of the class, or</div><div class=\"line\"> *         &lt;tt&gt;null&lt;/tt&gt; if not known</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  b</div><div class=\"line\"> *         The bytes that make up the class data. The bytes in positions</div><div class=\"line\"> *         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format</div><div class=\"line\"> *         of a valid class file as defined by</div><div class=\"line\"> *         &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  off</div><div class=\"line\"> *         The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  len</div><div class=\"line\"> *         The length of the class data</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  protectionDomain</div><div class=\"line\"> *         The ProtectionDomain of the class</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  The &lt;tt&gt;Class&lt;/tt&gt; object created from the data,</div><div class=\"line\"> *          and optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>  ClassFormatError</div><div class=\"line\"> *          If the data did not contain a valid class</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>  NoClassDefFoundError</div><div class=\"line\"> *          If &lt;tt&gt;name&lt;/tt&gt; is not equal to the &lt;a href=\"#name\"&gt;binary</div><div class=\"line\"> *          name&lt;/a&gt; of the class specified by &lt;tt&gt;b&lt;/tt&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>  IndexOutOfBoundsException</div><div class=\"line\"> *          If either &lt;tt&gt;off&lt;/tt&gt; or &lt;tt&gt;len&lt;/tt&gt; is negative, or if</div><div class=\"line\"> *          &lt;tt&gt;off+len&lt;/tt&gt; is greater than &lt;tt&gt;b.length&lt;/tt&gt;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>  SecurityException</div><div class=\"line\"> *          If an attempt is made to add this class to a package that</div><div class=\"line\"> *          contains classes that were signed by a different set of</div><div class=\"line\"> *          certificates than this class, or if &lt;tt&gt;name&lt;/tt&gt; begins with</div><div class=\"line\"> *          \"&lt;tt&gt;java.&lt;/tt&gt;\".</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> Class&lt;?&gt; defineClass(String name, <span class=\"keyword\">byte</span>[] b, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len,</div><div class=\"line\">                                     ProtectionDomain protectionDomain)</div><div class=\"line\">    <span class=\"keyword\">throws</span> ClassFormatError</div><div class=\"line\">&#123;</div><div class=\"line\">    protectionDomain = preDefineClass(name, protectionDomain);</div><div class=\"line\">    String source = defineClassSourceLocation(protectionDomain);</div><div class=\"line\">    Class&lt;?&gt; c = defineClass1(name, b, off, len, protectionDomain, source);</div><div class=\"line\">    postDefineClass(c, protectionDomain);</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>defineClass：接收以字节数组表示的类字节码，并把它转换成 Class 实例，该方法转换一个类的同时，会先要求装载该类的父类以及实现的接口类。重写findClass将使用到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String link = <span class=\"string\">\"rebey.cn\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"welcome to: \"</span>+link);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>.getClass().getClassLoader());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将这段java代码编译成.class文件(可通过javac指令)，放在 了E:\\201706下。同时在我的测试项目下也有一个/201705/src/classLoader/Test.java，代码相同。区别就是一个有包名一个没有包名。如果class文件中源码包含package信息，届时可能会抛出java.lang.NoClassDefFoundError (wrong name)异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> classLoader;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String basedir; <span class=\"comment\">// 需要该类加载器直接加载的类文件的基目录</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomClassLoader</span><span class=\"params\">(String basedir)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.basedir = basedir;</div><div class=\"line\">    &#125; </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</div><div class=\"line\">\t\tClass&lt;?&gt; c = findLoadedClass(name);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] bytes = loadClassData(name);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;    </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException(name);    </div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\tc = defineClass(name, bytes, <span class=\"number\">0</span>, bytes.length);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c; </div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 摘自网络</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] loadClassData(String name) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            name = name.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"//\"</span>);</div><div class=\"line\">            FileInputStream is = <span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(basedir + name + <span class=\"string\">\".class\"</span>));</div><div class=\"line\">            ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">            <span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> ((b = is.read()) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                baos.write(b);</div><div class=\"line\">            &#125;</div><div class=\"line\">            is.close();</div><div class=\"line\">            <span class=\"keyword\">return</span> baos.toByteArray();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编写自定义的类加载器，继承ClassLoader，重写了findClass方法，通过defineClass将读取的byte[]转为Class。然后通过以下main函数调用测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> classLoader;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loader</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arg)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 走自定义加载器</span></div><div class=\"line\">\t\tCustomClassLoader ccl = <span class=\"keyword\">new</span> CustomClassLoader(<span class=\"string\">\"E://201706//\"</span>);</div><div class=\"line\">\t\tClass&lt;?&gt; clazz = ccl.findClass(<span class=\"string\">\"Test\"</span>);</div><div class=\"line\">\t\tObject obj = clazz.newInstance();</div><div class=\"line\">\t\tMethod method = clazz.getDeclaredMethod(<span class=\"string\">\"print\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\tmethod.invoke(obj, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------我是分割线-------------------\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 走委派模式</span></div><div class=\"line\">\t\t<span class=\"comment\">// 隐式类加载</span></div><div class=\"line\">\t\tTest t1 = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">\t\tt1.print();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------我是分割线-------------------\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 显式类加载</span></div><div class=\"line\">\t\tClass&lt;?&gt; t2 = Class.forName(<span class=\"string\">\"classLoader.Test\"</span>);</div><div class=\"line\">\t\tObject obj2 = t2.newInstance();</div><div class=\"line\">\t\tMethod method2 = t2.getDeclaredMethod(<span class=\"string\">\"print\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\tmethod2.invoke(obj2, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"--------------我是分割线-------------------\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tClass&lt;Test&gt; t3 = Test.class;</div><div class=\"line\">\t\tObject obj3 = t3.newInstance();</div><div class=\"line\">\t\tMethod method3 = t3.getDeclaredMethod(<span class=\"string\">\"print\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\tmethod3.invoke(obj3, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">输出结果：</div><div class=\"line\"></div><div class=\"line\">welcome to: rebey.cn</div><div class=\"line\">classLoader.CustomClassLoader@<span class=\"number\">6</span>d06d69c</div><div class=\"line\">--------------我是分割线-------------------</div><div class=\"line\">welcome to: rebey.cn</div><div class=\"line\">sun.misc.Launcher$AppClassLoader@<span class=\"number\">73</span>d16e93</div><div class=\"line\">--------------我是分割线-------------------</div><div class=\"line\">sun.misc.Launcher$AppClassLoader@<span class=\"number\">73</span>d16e93</div><div class=\"line\">--------------我是分割线-------------------</div><div class=\"line\">sun.misc.Launcher$AppClassLoader@<span class=\"number\">73</span>d16e93</div></pre></td></tr></table></figure>\n<p>静态代码块随着类加载而执行，而且只会执行一次，所以这里t2、t3加载完成是并没有再输出。</p>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><p>ClassLoader线程安全；</p>\n<p>同个类加载器加载的.class类实例才相等；</p>\n<p>Class.forName(xxx.xx.xx) 返回的是一个类, .newInstance() 后才创建实例对象 ；</p>\n<p>Java.lang.Class对象是单实例的；</p>\n<p>执行顺序：静态代码块 &gt; 构造代码块 &gt; 构造函数</p>\n<blockquote>\n<p>1、父类静态变量和静态代码块（先声明的先执行）；</p>\n<p>2、子类静态变量和静态代码块（先声明的先执行）；</p>\n<p>3、父类的变量和代码块（先声明的先执行）；</p>\n<p>4、父类的构造函数；</p>\n<p>5、子类的变量和代码块（先声明的先执行）；</p>\n<p>6、子类的构造函数。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>通过自定义加载类，我们可以：</p>\n<p>①加载指定路径的class，甚至是来自网络（<a href=\"http://blog.csdn.net/liuxiao723846/article/details/47422683\" target=\"_blank\" rel=\"external\">自定义类加载器：从网上加载class到内存、实例化调用其中的方法</a>）、DB（<a href=\"http://www.iteye.com/topic/1118303\" target=\"_blank\" rel=\"external\">自定义的类装载器-从DB装载class(附上对类装载器的分析)</a>）；</p>\n<p>②给代码加密；（<a href=\"http://www.51cto.com/specbook/11/52046.htm\" target=\"_blank\" rel=\"external\">如何有效防止Java程序源码被人偷窥？</a>）</p>\n<p>③装逼(- -)；</p>\n<hr>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n"},{"title":"？ extends T与？ super T","url":"http://rebey.cn/2017/06/24/？ extends T与？ super T/","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>集合框架的源码经常见到“? extends E”、“? super T”。本篇文章以实例+注释讲讲“有限通配符的参数化类型”的创建、存值以及取值。<br><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/super%20and%20extends.png\" alt=\"image\"><br>这两种都是限定类的取值范围的写法。“? extends T”表示类的允许范围是T及其子类；“? super T”表示类的允许范围是T及其父类。也就是new的时候受到此约束。</p>\n<p>存值：只要能保证存放类是指定类及其子类即可。null不受“? extends/super T”约束。</p>\n<p>取值：“? extends T”取得的默认类型为上界T，“? super T”的默认类型为所有类的父类Object。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Extend</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ? extends T,T为临界类</span></div><div class=\"line\">\t\t<span class=\"comment\">// extends限定了类的上界</span></div><div class=\"line\">\t\t<span class=\"comment\">// Type mismatch: cannot convert from PriorityQueue&lt;Person&gt; to PriorityQueue&lt;? extends Parent&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">//PriorityQueue&lt;? extends Parent&gt; pq = new PriorityQueue&lt;Person&gt;();</span></div><div class=\"line\">\t\tPriorityQueue&lt;? extends Parent&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;Son&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 无法直接放入，因为无法保证存放类与Son的关系</span></div><div class=\"line\">\t\t<span class=\"comment\">//The method add(capture#1-of ? extends Parent) in the type PriorityQueue&lt;capture#1-of ? extends Parent&gt; is not applicable for the arguments (Son)</span></div><div class=\"line\">\t\t<span class=\"comment\">//pq.add(new Son()));</span></div><div class=\"line\">\t\t<span class=\"comment\">//The method add(capture#1-of ? extends Parent) in the type PriorityQueue&lt;capture#1-of ? extends Parent&gt; is not applicable for the arguments (Son)</span></div><div class=\"line\">\t\t<span class=\"comment\">//pq.add(new Parent());</span></div><div class=\"line\">\t\t<span class=\"comment\">//null不受类型限定，但PriorityQueue不允许为空，会抛出空指针异常</span></div><div class=\"line\">\t\t<span class=\"comment\">//pq.add(null);</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 间接存放</span></div><div class=\"line\">\t\tPriorityQueue&lt;Son&gt; pqs = <span class=\"keyword\">new</span> PriorityQueue&lt;Son&gt;();</div><div class=\"line\">\t\tpqs.add(<span class=\"keyword\">new</span> Son(<span class=\"string\">\"1\"</span>));</div><div class=\"line\">\t\tpqs.add(<span class=\"keyword\">new</span> Son(<span class=\"string\">\"2\"</span>));</div><div class=\"line\">\t\tpqs.add(<span class=\"keyword\">new</span> Son(<span class=\"string\">\"3\"</span>));</div><div class=\"line\">\t\tpqs.add(<span class=\"keyword\">new</span> Son(<span class=\"string\">\"4\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tPriorityQueue&lt;? extends Parent&gt; pq1 = pqs;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//取值</span></div><div class=\"line\">\t\tSon s = (Son) pq1.poll();</div><div class=\"line\">\t\tParent p = pq1.poll();</div><div class=\"line\">\t\t<span class=\"comment\">//Daughter d = (Daughter) pq1.poll(); // 编译通过，执行报错。类型转换异常。</span></div><div class=\"line\">\t\tPerson pp= pq1.poll();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(s.getName());</div><div class=\"line\">\t\tSystem.out.println(p.getName());</div><div class=\"line\">\t\tSystem.out.println(pp.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Super</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ? super T,T为临界类</span></div><div class=\"line\">\t\t<span class=\"comment\">// super限制了下界</span></div><div class=\"line\">\t\t<span class=\"comment\">// Type mismatch: cannot convert from PriorityQueue&lt;Son&gt; to PriorityQueue&lt;? super Parent&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">//PriorityQueue&lt;? super Parent&gt; pq = new PriorityQueue&lt;Son&gt;();</span></div><div class=\"line\">\t\tPriorityQueue&lt;? <span class=\"keyword\">super</span> Parent&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;Person&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 可存放临界类的子类，因为任一“? super T”也是其父类</span></div><div class=\"line\">\t\tpq.add(<span class=\"keyword\">new</span> Son(<span class=\"string\">\"1\"</span>));</div><div class=\"line\">\t\tpq.add(<span class=\"keyword\">new</span> Daughter(<span class=\"string\">\"2\"</span>));</div><div class=\"line\">\t\tpq.add(<span class=\"keyword\">new</span> Parent(<span class=\"string\">\"3\"</span>));</div><div class=\"line\">\t\t<span class=\"comment\">// The method add(capture#4-of ? super Parent) in the type PriorityQueue&lt;capture#4-of ? super Parent&gt; is not applicable for the arguments (Person)</span></div><div class=\"line\">\t\t<span class=\"comment\">//pq.add(new Person(\"4\"));</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 取值（默认Object，类型顺序必须与存放对应或者是其父类，否则类型转换错误）</span></div><div class=\"line\">\t\t<span class=\"comment\">/*Parent p = (Parent) pq.poll();</span></div><div class=\"line\">\t\tDaughter d = (Daughter) pq.poll();</div><div class=\"line\">\t\tSon s = (Son) pq.poll();*/</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tParent p = (Parent) pq.poll();</div><div class=\"line\">\t\tParent d = (Parent) pq.poll();</div><div class=\"line\">\t\tParent s = (Parent) pq.poll();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(d.getName());</div><div class=\"line\">\t\tSystem.out.println(p.getName());</div><div class=\"line\">\t\tSystem.out.println(s.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Person</span>&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Person o)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> o.name.compareTo(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Daughter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Daughter</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><p>针对以上特性，java中有“PECS（“Producer Extends，Consumer Super”）”的说法。即如果要用参数化类型表示生产者，就使用&lt;? extends T&gt;；如果表示消费者，就使用&lt;? super T&gt;。</p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><p><a href=\"http://www.importnew.com/8966.html\" target=\"_blank\" rel=\"external\">Java 泛型: 什么是PECS（Producer Extends, Consumer Super）</a>。</p>\n"},{"title":"【java源码一带一路系列】之PriorityQueue","url":"http://rebey.cn/2017/06/23/【java源码一带一路系列】之PriorityQueue/","content":"<p>按照下图的配方，走了一遍源码。<br>凑齐PriorityQueue就可以召唤神龙了。<br>Ler’s go go go!</p>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/414/440/4144400515-594d35d3ef7fd_articlex\" alt=\"clipboard.png\"><br><img src=\"https://sfault-image.b0.upaiyun.com/152/295/1522952226-594d360d5ca37_articlex\" alt=\"clipboard.png\"></p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Priority queue represented as a balanced binary heap: the two</div><div class=\"line\"> * children of queue[n] are queue[2*n+1] and queue[2*(n+1)].  The</div><div class=\"line\"> * priority queue is ordered by comparator, or by the elements'</div><div class=\"line\"> * natural ordering, if comparator is null: For each node n in the</div><div class=\"line\"> * heap and each descendant d of n, n &lt;= d.  The element with the</div><div class=\"line\"> * lowest value is in queue[0], assuming the queue is nonempty.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">transient</span> Object[] queue; <span class=\"comment\">// non-private to simplify nested class access</span></div></pre></td></tr></table></figure>\n<p>没错这是个数组，为了更好的理解注释的含义，请看下面↓。</p>\n<p><strong>满二叉树：</strong></p>\n<p>所有的节点都有2个叶子节点，除了最后层叶子节点；</p>\n<p>节点数n和深度d的关系 n=2^d-1；</p>\n<p>第i层上的节点数为2^(i-1)；</p>\n<p>第n个节点的父节点：n/2,左子节点：2n,右子节点：2n+1;(参考下图)</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/Full%20Binary%20Tree.png\" alt=\"满二叉树与完全二叉树\"></p>\n<p><strong>完全二叉树：</strong></p>\n<p>有且仅有最底层叶子节点不完整就是完全二叉树。（例如：把15去掉）</p>\n<p><strong>最小堆：</strong></p>\n<p>父节点小于左右子节点的完全二叉树。</p>\n<p><strong>转数组：</strong></p>\n<p>用数组来存储二叉树后（参见下图）可得，根节点A[0]；左子节点a[2n+1];右子节点a[2(n+1)]，父节点a[(n-1)/2]。（n为数组下标，从0开始）</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/binaryTreeArray.png\" alt=\"二叉树转数组\"></p>\n<p>是的，优先队列的存储结构大概就是这样推演而来。</p>\n<h2 id=\"heapify-–-gt-siftDown-–-gt-siftDownComparable-–-gt-siftDownUsingComparator\"><a href=\"#heapify-–-gt-siftDown-–-gt-siftDownComparable-–-gt-siftDownUsingComparator\" class=\"headerlink\" title=\"heapify() –&gt; siftDown() –&gt; siftDownComparable() –&gt; siftDownUsingComparator()\"></a>heapify() –&gt; siftDown() –&gt; siftDownComparable() –&gt; siftDownUsingComparator()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Establishes the heap invariant (described above) in the entire tree,</div><div class=\"line\"> * assuming nothing about the order of the elements prior to the call.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (size &gt;&gt;&gt; <span class=\"number\">1</span>) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">        siftDown(i, (E) queue[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Inserts item x at position k, maintaining heap invariant by</div><div class=\"line\"> * demoting x down the tree repeatedly until it is less than or</div><div class=\"line\"> * equal to its children or is a leaf.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> k the position to fill</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the item to insert</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftDown</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (comparator != <span class=\"keyword\">null</span>)</div><div class=\"line\">        siftDownUsingComparator(k, x);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        siftDownComparable(k, x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftDownComparable</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</div><div class=\"line\">    Comparable&lt;? <span class=\"keyword\">super</span> E&gt; key = (Comparable&lt;? <span class=\"keyword\">super</span> E&gt;)x;</div><div class=\"line\">    <span class=\"keyword\">int</span> half = size &gt;&gt;&gt; <span class=\"number\">1</span>;        <span class=\"comment\">// loop while a non-leaf</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (k &lt; half) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> child = (k &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>; <span class=\"comment\">// assume left child is least</span></div><div class=\"line\">        Object c = queue[child];</div><div class=\"line\">        <span class=\"keyword\">int</span> right = child + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (right &lt; size &amp;&amp;</div><div class=\"line\">            ((Comparable&lt;? <span class=\"keyword\">super</span> E&gt;) c).compareTo((E) queue[right]) &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            c = queue[child = right];</div><div class=\"line\">        <span class=\"keyword\">if</span> (key.compareTo((E) c) &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        queue[k] = c;</div><div class=\"line\">        k = child;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = key;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftDownUsingComparator</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> half = size &gt;&gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (k &lt; half) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> child = (k &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>; <span class=\"comment\">//2n + 1,这里n是下标</span></div><div class=\"line\">        Object c = queue[child];</div><div class=\"line\">        <span class=\"keyword\">int</span> right = child + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (right &lt; size &amp;&amp;</div><div class=\"line\">            comparator.compare((E) c, (E) queue[right]) &gt; <span class=\"number\">0</span>) <span class=\"comment\">// 找出最小子节点</span></div><div class=\"line\">            c = queue[child = right];</div><div class=\"line\">        <span class=\"keyword\">if</span> (comparator.compare(x, (E) c) &lt;= <span class=\"number\">0</span>) <span class=\"comment\">// 父节点小则退出循环，否则进行替换</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        queue[k] = c;</div><div class=\"line\">        k = child;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是任意数组最小堆化的过程。如果是一个合格的最小堆，那么所有的父节点都在数组前半部分，而通过父节点又能得到左右子节点。因此源码一上来就“size &gt;&gt;&gt; 1”（相当于除以2），只需对前半部分进行循环处理，使得循环结束后所有父节点均大于左/右子节点。这里非根父节点会被多次比较到。heapify()后将得到上文所说的最小堆数组。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">poll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> s = --size;</div><div class=\"line\">    modCount++;</div><div class=\"line\">    E result = (E) queue[<span class=\"number\">0</span>];</div><div class=\"line\">    E x = (E) queue[s];</div><div class=\"line\">    queue[s] = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"number\">0</span>)</div><div class=\"line\">        siftDown(<span class=\"number\">0</span>, x); <span class=\"comment\">// !</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>poll()的核心也是siftDown，而这里的“siftDown(0, x);”与之前的“siftDown(i, (E) queue[i]);”不同的是，下标0所对应的元素本非x。也就是说，这里进行了个转换：把最后queue[s]替换了queue[0]进行新的最小堆数组化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * Removes a single instance of the specified element from this queue,</div><div class=\"line\"> * if it is present.  More formally, removes an element &#123;<span class=\"doctag\">@code</span> e&#125; such</div><div class=\"line\"> * that &#123;<span class=\"doctag\">@code</span> o.equals(e)&#125;, if this queue contains one or more such</div><div class=\"line\"> * elements.  Returns &#123;<span class=\"doctag\">@code</span> true&#125; if and only if this queue contained</div><div class=\"line\"> * the specified element (or equivalently, if this queue changed as a</div><div class=\"line\"> * result of the call).</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> o element to be removed from this queue, if present</div><div class=\"line\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this queue changed as a result of the call</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = indexOf(o);</div><div class=\"line\">    <span class=\"keyword\">if</span> (i == -<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        removeAt(i);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Removes the ith element from queue.</div><div class=\"line\"> *</div><div class=\"line\"> * Normally this method leaves the elements at up to i-1,</div><div class=\"line\"> * inclusive, untouched.  Under these circumstances, it returns</div><div class=\"line\"> * null.  Occasionally, in order to maintain the heap invariant,</div><div class=\"line\"> * it must swap a later element of the list with one earlier than</div><div class=\"line\"> * i.  Under these circumstances, this method returns the element</div><div class=\"line\"> * that was previously at the end of the list and is now at some</div><div class=\"line\"> * position before i. This fact is used by iterator.remove so as to</div><div class=\"line\"> * avoid missing traversing elements.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">removeAt</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// assert i &gt;= 0 &amp;&amp; i &lt; size;</span></div><div class=\"line\">    modCount++;</div><div class=\"line\">    <span class=\"keyword\">int</span> s = --size;</div><div class=\"line\">    <span class=\"keyword\">if</span> (s == i) <span class=\"comment\">// removed last element</span></div><div class=\"line\">        queue[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        E moved = (E) queue[s];</div><div class=\"line\">        queue[s] = <span class=\"keyword\">null</span>;</div><div class=\"line\">        siftDown(i, moved); </div><div class=\"line\">        <span class=\"keyword\">if</span> (queue[i] == moved) &#123;</div><div class=\"line\">            siftUp(i, moved);</div><div class=\"line\">            <span class=\"keyword\">if</span> (queue[i] != moved)</div><div class=\"line\">                <span class=\"keyword\">return</span> moved;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如你所见，remove()也用到了siftDown()（同时还有siftUp()，下面介绍）。这里 经过siftDown后，如果queue[i] == moved则表示queue[i]的左右子节点都大于moved，即保证了i节点子树是最小堆，但queue[i]的父节点是否小于moved却未知，故又进行了siftUp。（图片来自【2】）</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/195193-e9ad437213e69b07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Inserts item x at position k, maintaining heap invariant by</div><div class=\"line\"> * promoting x up the tree until it is greater than or equal to</div><div class=\"line\"> * its parent, or is the root.</div><div class=\"line\"> *</div><div class=\"line\"> * To simplify and speed up coercions and comparisons. the</div><div class=\"line\"> * Comparable and Comparator versions are separated into different</div><div class=\"line\"> * methods that are otherwise identical. (Similarly for siftDown.)</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> k the position to fill</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the item to insert</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftUp</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (comparator != <span class=\"keyword\">null</span>)</div><div class=\"line\">        siftUpUsingComparator(k, x);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        siftUpComparable(k, x);</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftUpComparable</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</div><div class=\"line\">    Comparable&lt;? <span class=\"keyword\">super</span> E&gt; key = (Comparable&lt;? <span class=\"keyword\">super</span> E&gt;) x;</div><div class=\"line\">    <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> parent = (k - <span class=\"number\">1</span>) &gt;&gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        Object e = queue[parent];</div><div class=\"line\">        <span class=\"keyword\">if</span> (key.compareTo((E) e) &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        queue[k] = e;</div><div class=\"line\">        k = parent;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = key;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftUpUsingComparator</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> parent = (k - <span class=\"number\">1</span>) &gt;&gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        Object e = queue[parent];</div><div class=\"line\">        <span class=\"keyword\">if</span> (comparator.compare(x, (E) e) &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        queue[k] = e;</div><div class=\"line\">        k = parent;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>与之相对的，还有名为siftUpComparable()/siftUpUsingComparator()的方法。在新增元素时被调用。新增元素放在下标为size的位置。这里的down与up指的是被比较对象x的去向。比较后x被赋值给子节点就是down，被赋值给父节点就是up。当然你来写的时候也可能新增时，从上到下循环遍历。</p>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><p>PriorityQueue有序；不允许为null；非线程安全；（PriorityBlockingQueue线程安全）；没有介绍的地方大抵与其他集合框架相似，如扩容机制等。</p>\n<p>优先队列每次出队的元素都是优先级最高（权值最小）的元素,通过比较（Comparator或元素本身自然排序）决定优先级。</p>\n<p>记得常来复习啊~~~</p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n<h2 id=\"推荐文章：\"><a href=\"#推荐文章：\" class=\"headerlink\" title=\"推荐文章：\"></a>推荐文章：</h2><p>【1】<a href=\"https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/8-PriorityQueue.md\" target=\"_blank\" rel=\"external\">【深入理解Java集合框架】深入理解Java PriorityQueue;</a></p>\n<p>【2】<a href=\"http://www.jianshu.com/p/0e84b8d3606c\" target=\"_blank\" rel=\"external\">java集合——Queue；</a></p>\n"},{"title":"【java源码一带一路系列】之ArrayList、Vector","url":"http://rebey.cn/2017/06/16/【java源码一带一路系列】之ArrayList、Vector/","content":"<p>一路至此，风景过半。<br>ArrayList与Vector虽然名字各异，源码实现基本相同，除了Vector增加了线程安全。所以作者建议我们在不需要线程安全的情况下尽量使用ArrayList。下面看看在ArrayList源码中遇到什么有趣的事情。</p>\n<h2 id=\"DEFAULTCAPACITY-EMPTY-ELEMENTDATA与EMPTY-ELEMENTDATA\"><a href=\"#DEFAULTCAPACITY-EMPTY-ELEMENTDATA与EMPTY-ELEMENTDATA\" class=\"headerlink\" title=\"DEFAULTCAPACITY_EMPTY_ELEMENTDATA与EMPTY_ELEMENTDATA\"></a>DEFAULTCAPACITY_EMPTY_ELEMENTDATA与EMPTY_ELEMENTDATA</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Shared empty array instance used for empty instances.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Shared empty array instance used for default sized empty instances. We</div><div class=\"line\"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</div><div class=\"line\"> * first element is added.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Constructs an empty list with the specified initial capacity.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>  initialCapacity  the initial capacity of the list</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> IllegalArgumentException if the specified initial capacity</div><div class=\"line\"> *         is negative</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+</div><div class=\"line\">                                           initialCapacity);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Constructs an empty list with an initial capacity of ten.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Constructs a list containing the elements of the specified</div><div class=\"line\"> * collection, in the order they are returned by the collection's</div><div class=\"line\"> * iterator.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> c the collection whose elements are to be placed into this list</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if the specified collection is null</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">    elementData = c.toArray();</div><div class=\"line\">    <span class=\"keyword\">if</span> ((size = elementData.length) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652) ①</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</div><div class=\"line\">            elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// replace with empty array.</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>区别：DEFAULTCAPACITY_EMPTY_ELEMENTDATA用于无参初始化；EMPTY_ELEMENTDATA用于指定容量为0时的初始化。</p>\n<h2 id=\"trimToSize\"><a href=\"#trimToSize\" class=\"headerlink\" title=\"trimToSize()\"></a>trimToSize()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the</div><div class=\"line\"> * list's current size.  An application can use this operation to minimize</div><div class=\"line\"> * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trimToSize</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    modCount++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size &lt; elementData.length) &#123;</div><div class=\"line\">        elementData = (size == <span class=\"number\">0</span>)</div><div class=\"line\">          ? EMPTY_ELEMENTDATA</div><div class=\"line\">          : Arrays.copyOf(elementData, size);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>去除扩容后未存放元素的预留空间，以size为基准。</p>\n<h2 id=\"ensureCapacity-–-gt-ensureExplicitCapacity-–-gt-grow-–-gt-hugeCapacity\"><a href=\"#ensureCapacity-–-gt-ensureExplicitCapacity-–-gt-grow-–-gt-hugeCapacity\" class=\"headerlink\" title=\"ensureCapacity() –&gt; ensureExplicitCapacity() –&gt; grow() –&gt; hugeCapacity()\"></a>ensureCapacity() –&gt; ensureExplicitCapacity() –&gt; grow() –&gt; hugeCapacity()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</div><div class=\"line\"> * necessary, to ensure that it can hold at least the number of elements</div><div class=\"line\"> * specified by the minimum capacity argument.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>   minCapacity   the desired minimum capacity</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</div><div class=\"line\">        <span class=\"comment\">// any size if not default element table</span></div><div class=\"line\">        ? <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"comment\">// larger than default for default empty table. It's already</span></div><div class=\"line\">        <span class=\"comment\">// supposed to be at default size.</span></div><div class=\"line\">        : DEFAULT_CAPACITY;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &gt; minExpand) &#123;</div><div class=\"line\">        ensureExplicitCapacity(minCapacity);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">    modCount++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        grow(minCapacity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Increases the capacity to ensure that it can hold at least the</div><div class=\"line\"> * number of elements specified by the minimum capacity argument.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> minCapacity the desired minimum capacity</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        newCapacity = minCapacity;</div><div class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        newCapacity = hugeCapacity(minCapacity);</div><div class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></div><div class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</div><div class=\"line\">    <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class=\"line\">        Integer.MAX_VALUE :</div><div class=\"line\">        MAX_ARRAY_SIZE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>预设容量（提前扩容），可提高初始化效率。扩容后比扩容前多了“oldCapacity &gt;&gt; 1”（即多了原来的50%）。同时注意溢出情况处理。（overflow-conscious code）。即“a-b&lt;0”而不是”a&lt;b”：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a = Integer.MAX_VALUE;</div><div class=\"line\"><span class=\"keyword\">int</span> b = Integer.MAX_VALUE + <span class=\"number\">1</span>;    </div><div class=\"line\">System.out.println(a &lt; b); <span class=\"comment\">// false    </span></div><div class=\"line\">System.out.println(a - b &lt; <span class=\"number\">0</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h2 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray()\"></a>toArray()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns an array containing all of the elements in this list in proper</div><div class=\"line\"> * sequence (from first to last element); the runtime type of the returned</div><div class=\"line\"> * array is that of the specified array.  If the list fits in the</div><div class=\"line\"> * specified array, it is returned therein.  Otherwise, a new array is</div><div class=\"line\"> * allocated with the runtime type of the specified array and the size of</div><div class=\"line\"> * this list.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;If the list fits in the specified array with room to spare</div><div class=\"line\"> * (i.e., the array has more elements than the list), the element in</div><div class=\"line\"> * the array immediately following the end of the collection is set to</div><div class=\"line\"> * &lt;tt&gt;null&lt;/tt&gt;.  (This is useful in determining the length of the</div><div class=\"line\"> * list &lt;i&gt;only&lt;/i&gt; if the caller knows that the list does not contain</div><div class=\"line\"> * any null elements.)</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a the array into which the elements of the list are to</div><div class=\"line\"> *          be stored, if it is big enough; otherwise, a new array of the</div><div class=\"line\"> *          same runtime type is allocated for this purpose.</div><div class=\"line\"> * <span class=\"doctag\">@return</span> an array containing the elements of the list</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ArrayStoreException if the runtime type of the specified array</div><div class=\"line\"> *         is not a supertype of the runtime type of every element in</div><div class=\"line\"> *         this list</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if the specified array is null</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a.length &lt; size)</div><div class=\"line\">        <span class=\"comment\">// Make a new array of a's runtime type, but my contents:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</div><div class=\"line\">    System.arraycopy(elementData, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, size);</div><div class=\"line\">    <span class=\"keyword\">if</span> (a.length &gt; size)</div><div class=\"line\">        a[size] = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当传入数组长度大于ArrayList的size时，将a[size]置空作为调用者判断标志。根据这段代码写了个demo帮助理解：（扩展知识见②）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList al = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">al.add(<span class=\"string\">\"s\"</span>);</div><div class=\"line\"></div><div class=\"line\">String[] s = &#123;<span class=\"string\">\"c\"</span>,<span class=\"string\">\"h\"</span>,<span class=\"string\">\"e\"</span>&#125;;</div><div class=\"line\">String[] sal = (String[]) al.toArray(s);</div><div class=\"line\">System.out.println(sal[<span class=\"number\">0</span>] + <span class=\"string\">\",\"</span> + sal[<span class=\"number\">1</span>] + <span class=\"string\">\",\"</span> + sal[<span class=\"number\">2</span>]); <span class=\"comment\">// s,null,e</span></div></pre></td></tr></table></figure>\n<h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add()\"></a>add()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Inserts the specified element at the specified position in this</div><div class=\"line\"> * list. Shifts the element currently at that position (if any) and</div><div class=\"line\"> * any subsequent elements to the right (adds one to their indices).</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> index index at which the specified element is to be inserted</div><div class=\"line\"> * <span class=\"doctag\">@param</span> element element to be inserted</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> IndexOutOfBoundsException &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">    rangeCheckForAdd(index);</div><div class=\"line\"></div><div class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></div><div class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</div><div class=\"line\">                     size - index);</div><div class=\"line\">    elementData[index] = element;</div><div class=\"line\">    size++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>新增、删除都用到了System.arraycopy(Object src, int  srcPos, Object dest, int destPos, int length);下面举例加深理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] arr =&#123;<span class=\"string\">\"r\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\".\"</span>&#125;; </div><div class=\"line\">System.arraycopy(arr, <span class=\"number\">0</span>, arr, <span class=\"number\">2</span>, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(String i : arr) &#123;</div><div class=\"line\">\tSystem.out.println(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>即将arr下标从0开始的2个元素拷贝到arr下标从2开始的位置。</p>\n<h2 id=\"retainAll\"><a href=\"#retainAll\" class=\"headerlink\" title=\"retainAll()\"></a>retainAll()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Retains only the elements in this list that are contained in the</div><div class=\"line\"> * specified collection.  In other words, removes from this list all</div><div class=\"line\"> * of its elements that are not contained in the specified collection.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> c collection containing elements to be retained in this list</div><div class=\"line\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this list changed as a result of the call</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ClassCastException if the class of an element of this list</div><div class=\"line\"> *         is incompatible with the specified collection</div><div class=\"line\"> * (&lt;a href=\"Collection.html#optional-restrictions\"&gt;optional&lt;/a&gt;)</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if this list contains a null element and the</div><div class=\"line\"> *         specified collection does not permit null elements</div><div class=\"line\"> * (&lt;a href=\"Collection.html#optional-restrictions\"&gt;optional&lt;/a&gt;),</div><div class=\"line\"> *         or if the specified collection is null</div><div class=\"line\"> * <span class=\"doctag\">@see</span> Collection#contains(Object)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class=\"line\">    Objects.requireNonNull(c);</div><div class=\"line\">    <span class=\"keyword\">return</span> batchRemove(c, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">batchRemove</span><span class=\"params\">(Collection&lt;?&gt; c, <span class=\"keyword\">boolean</span> complement)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Object[] elementData = <span class=\"keyword\">this</span>.elementData;</div><div class=\"line\">    <span class=\"keyword\">int</span> r = <span class=\"number\">0</span>, w = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (; r &lt; size; r++)</div><div class=\"line\">            <span class=\"keyword\">if</span> (c.contains(elementData[r]) == complement)</div><div class=\"line\">                elementData[w++] = elementData[r];</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Preserve behavioral compatibility with AbstractCollection,</span></div><div class=\"line\">        <span class=\"comment\">// even if c.contains() throws.</span></div><div class=\"line\">        <span class=\"comment\">// 保证异常时，未比较元素不丢失</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (r != size) &#123;</div><div class=\"line\">            System.arraycopy(elementData, r,</div><div class=\"line\">                             elementData, w,</div><div class=\"line\">                             size - r);</div><div class=\"line\">            w += size - r;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (w != size) &#123;</div><div class=\"line\">            <span class=\"comment\">// clear to let GC do its work</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = w; i &lt; size; i++)</div><div class=\"line\">                elementData[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            modCount += size - w;</div><div class=\"line\">            size = w;</div><div class=\"line\">            modified = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> modified;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>a.retainAll(c)可以看成取a与c交集，a非c子集时，返回true。a中只留在c中存在的元素，其余删除。否则，返回false。</p>\n<p>“elementData[w++] = elementData[r];”w永远小于等于r，因此可以将找到的相等元素大胆的放在elementData[w++]中（elementData[w++]是先放后加）。</p>\n<h2 id=\"iterator\"><a href=\"#iterator\" class=\"headerlink\" title=\"iterator()\"></a>iterator()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns an iterator over the elements in this list in proper sequence.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;The returned iterator is &lt;a href=\"#fail-fast\"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> an iterator over the elements in this list in proper sequence</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * An optimized version of AbstractList.Itr</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></div><div class=\"line\">    <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></div><div class=\"line\">    <span class=\"keyword\">int</span> expectedModCount = modCount;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否有下一个元素</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cursor != size;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 游标移动</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        checkForComodification();</div><div class=\"line\">        <span class=\"keyword\">int</span> i = cursor;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= size)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData; <span class=\"comment\">// !!!</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= elementData.length)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        cursor = i + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> (E) elementData[lastRet = i]; <span class=\"comment\">//第一次cursor=1，lastRet=0</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// lastRet不等于-1时才能进行删除，即next()后才能使用remove()</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">        checkForComodification();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</div><div class=\"line\">            cursor = lastRet;</div><div class=\"line\">            lastRet = -<span class=\"number\">1</span>;</div><div class=\"line\">            expectedModCount = modCount;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEachRemaining</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> E&gt; consumer)</span> </span>&#123;</div><div class=\"line\">        Objects.requireNonNull(consumer);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = ArrayList.<span class=\"keyword\">this</span>.size;</div><div class=\"line\">        <span class=\"keyword\">int</span> i = cursor;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= elementData.length) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</div><div class=\"line\">            consumer.accept((E) elementData[i++]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// update once at end of iteration to reduce heap write traffic ！！！</span></div><div class=\"line\">        cursor = i;</div><div class=\"line\">        lastRet = i - <span class=\"number\">1</span>;</div><div class=\"line\">        checkForComodification();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (modCount != expectedModCount)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Iterator()所指类似数据库的游标，不了解的同学可参看以下解释：</p>\n<blockquote>\n<p>当使用语句Iterator it=List.Iterator()时，迭代器it指向的位置是Iterator1指向的位置，当执行语句it.next()之后，迭代器指向的位置后移到Iterator2指向的位置。[1]</p>\n</blockquote>\n<p><img src=\"http://images2015.cnblogs.com/blog/909817/201612/909817-20161228092946507-1691630785.png\" alt=\"iterator\"></p>\n<p>由源码可见ArrayList的迭代器基于Itr子类实现。该类实现了Iterator接口，并重写了它的全部方法（4种）。同时增加了checkForComodification()考虑并发问题。</p>\n<h2 id=\"listIterator\"><a href=\"#listIterator\" class=\"headerlink\" title=\"listIterator()\"></a>listIterator()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns a list iterator over the elements in this list (in proper</div><div class=\"line\"> * sequence), starting at the specified position in the list.</div><div class=\"line\"> * The specified index indicates the first element that would be</div><div class=\"line\"> * returned by an initial call to &#123;<span class=\"doctag\">@link</span> ListIterator#next next&#125;.</div><div class=\"line\"> * An initial call to &#123;<span class=\"doctag\">@link</span> ListIterator#previous previous&#125; would</div><div class=\"line\"> * return the element with the specified index minus one.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;The returned list iterator is &lt;a href=\"#fail-fast\"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> IndexOutOfBoundsException &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; size)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListItr(index);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns a list iterator over the elements in this list (in proper</div><div class=\"line\"> * sequence).</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;The returned list iterator is &lt;a href=\"#fail-fast\"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #listIterator(int)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListItr(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * An optimized version of AbstractList.ListItr</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">extends</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">    ListItr(<span class=\"keyword\">int</span> index) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        cursor = index;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 向前</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cursor != <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nextIndex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cursor;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">previousIndex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cursor - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        checkForComodification();</div><div class=\"line\">        <span class=\"keyword\">int</span> i = cursor - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= elementData.length)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        cursor = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 替换</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">        checkForComodification();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ArrayList.<span class=\"keyword\">this</span>.set(lastRet, e);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        checkForComodification();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> i = cursor;</div><div class=\"line\">            ArrayList.<span class=\"keyword\">this</span>.add(i, e);</div><div class=\"line\">            cursor = i + <span class=\"number\">1</span>;</div><div class=\"line\">            lastRet = -<span class=\"number\">1</span>;</div><div class=\"line\">            expectedModCount = modCount;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>listIterator有2中构造方法，即它多了指定游标的功能。它实现了ListIterator<e> extends Iterator<e>接口，比Iterator多了一些方法。Iterator只能从前往后删除，而listIterator可实现从后往前删除/替换。同时也提供了获取前后下标的方法。</e></e></p>\n<h2 id=\"说点什么\"><a href=\"#说点什么\" class=\"headerlink\" title=\"说点什么\"></a>说点什么</h2><p>private class SubList extends AbstractList<e> implements RandomAccess {…} 源码太长就不贴出来了。它是ArrayList的子类，表示ArrayList的子集，需要注意的是，对它的数据进行更改会影响原数据。</e></p>\n<p>此外，源码中出现了大量泛型（如T、E…）。希望顺便巩固泛型知识。</p>\n<p>ArrayList允许为null；非线程安全；有序。</p>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><p>1.<a href=\"http://www.cnblogs.com/cmdra/p/5901793.html\" target=\"_blank\" rel=\"external\">ArrayList c.toArray might (incorrectly) not return Object[] (see 6260652)；</a>2016.09.23;</p>\n<p>2.<a href=\"http://www.cnblogs.com/xiaomiganfan/p/5362732.html\" target=\"_blank\" rel=\"external\">为什么 Java ArrayList.toArray(T[]) 方法的参数类型是 T 而不是 E ？</a>；2016.04.07;</p>\n<p>[1]<a href=\"http://blog.csdn.net/longshengguoji/article/details/41551491\" target=\"_blank\" rel=\"external\">JAVA中ListIterator和Iterator详解与辨析</a>;2014.11.27;</p>\n"},{"title":"【java源码一带一路系列】之HashSet、LinkedHashSet、TreeSet","url":"http://rebey.cn/2017/06/10/【java源码一带一路系列】之HashSet、LinkedHashSet、TreeSet/","content":"<pre><code>Map篇暂告段落，却并非离我们而去。这不在本篇中你就能经常见到她。HashSet、LinkedHashSet、TreeSet各自基于对应Map实现，各自源码内容较少，因此归纳为一篇。\n</code></pre><h2 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Dummy value to associate with an Object in the backing Map</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object PRESENT = <span class=\"keyword\">new</span> Object();</div></pre></td></tr></table></figure>\n<p>HashSet基于HashMap实现；而Map是键值对形式的，因此构造一个PRESENT假装为值。</p>\n<hr>\n<p>同样在HashSet源码的<em>Line273</em>与<em>Line294</em>分别见看到老朋友writeObject()和readObject()。使用它们自定义序列化规则，将不会调用默认的序列化方法。</p>\n<blockquote>\n<p>这样做可以降低性能消耗的同时，还可以减少序列化字节流的大小，从而减少网络开销（RPC框架中）。[①]</p>\n</blockquote>\n<p>记得在之前的文章中留了一个问题。即该private方法供谁调用？解释如下，然而笔者并未在ObjectOutputStream源码中找到getPrivateMethod方法，不知是否由于版本不同还是作者笔误。倒是在ObjectStreamClass中找到了getPrivateMethod()。</p>\n<blockquote>\n<p>ObjectOutputStream使用了反射来寻找是否声明了这两个方法。因为ObjectOutputStream使用getPrivateMethod，所以这些方法不得不被声明为priate以至于供ObjectOutputStream来使用。 [②]</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Creates a &lt;em&gt;&lt;a href=\"Spliterator.html#binding\"&gt;late-binding&lt;/a&gt;&lt;/em&gt;</div><div class=\"line\"> * and &lt;em&gt;fail-fast&lt;/em&gt; &#123;<span class=\"doctag\">@link</span> Spliterator&#125; over the elements in this</div><div class=\"line\"> * set.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;The &#123;<span class=\"doctag\">@code</span> Spliterator&#125; reports &#123;<span class=\"doctag\">@link</span> Spliterator#SIZED&#125; and</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> Spliterator#DISTINCT&#125;.  Overriding implementations should document</div><div class=\"line\"> * the reporting of additional characteristic values.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> a &#123;<span class=\"doctag\">@code</span> Spliterator&#125; over the elements in this set</div><div class=\"line\"> * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Spliterator&lt;E&gt; <span class=\"title\">spliterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashMap.KeySpliterator&lt;E,Object&gt;(map, <span class=\"number\">0</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// HashMap源码中</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeySpliterator</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span></div><div class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title\">HashMapSpliterator</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title\">Spliterator</span>&lt;<span class=\"title\">K</span>&gt; &#123;</div><div class=\"line\">    KeySpliterator(HashMap&lt;K,V&gt; m, <span class=\"keyword\">int</span> origin, <span class=\"keyword\">int</span> fence, <span class=\"keyword\">int</span> est,</div><div class=\"line\">                   <span class=\"keyword\">int</span> expectedModCount) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(m, origin, fence, est, expectedModCount);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> KeySpliterator&lt;K,V&gt; <span class=\"title\">trySplit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> (lo &gt;= mid || current != <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> :</div><div class=\"line\">            <span class=\"keyword\">new</span> KeySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class=\"number\">1</span>,</div><div class=\"line\">                                    expectedModCount);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEachRemaining</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> K&gt; action)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i, hi, mc;</div><div class=\"line\">        <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">        HashMap&lt;K,V&gt; m = map;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab = m.table;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((hi = fence) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            mc = expectedModCount = m.modCount;</div><div class=\"line\">            hi = fence = (tab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : tab.length;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            mc = expectedModCount;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tab != <span class=\"keyword\">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</div><div class=\"line\">            (i = index) &gt;= <span class=\"number\">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">            Node&lt;K,V&gt; p = current;</div><div class=\"line\">            current = <span class=\"keyword\">null</span>;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    p = tab[i++];</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    action.accept(p.key);</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> || i &lt; hi);</div><div class=\"line\">            <span class=\"keyword\">if</span> (m.modCount != mc)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAdvance</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> K&gt; action)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> hi;</div><div class=\"line\">        <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">        Node&lt;K,V&gt;[] tab = map.table;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tab != <span class=\"keyword\">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span> || index &lt; hi) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    current = tab[index++];</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    K k = current.key;</div><div class=\"line\">                    current = current.next;</div><div class=\"line\">                    action.accept(k);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (map.modCount != expectedModCount)</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">characteristics</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (fence &lt; <span class=\"number\">0</span> || est == map.size ? Spliterator.SIZED : <span class=\"number\">0</span>) |</div><div class=\"line\">            Spliterator.DISTINCT;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>spliterator()将Set中所有元素封装中并返回，依靠HashMap.KeySpliterator()方法来实现。HashMap.KeySpliterator重写了Spliterator接口的一些方法：</p>\n<p>tryAdvance：如果存在没处理（action.accept(k)）的数据，执行指定的代码并返回true；若不存在，直接返回false；单次；</p>\n<p>forEachRemaining：循环对所有数据进行处理（action.accept(p.key)）；</p>\n<p>trySplit：分割出一个新的Spliterator，从“mid = (lo + hi) &gt;&gt;&gt; 1;”来看，KeySpliterator是对半切割的。</p>\n<p>characteristics：返回特征值。这里只会有2种结果。Spliterator.SIZED(0x00000040)|Spliterator.DISTINCT(0x00000001)=65（十进制）和0|Spliterator.DISTINCT(0x00000001)=1，通过返回值能反应KeySpliterator当前状态。因为一旦调用以上方法处理数据，fence值就会被改变，即从65变为1（个人理解，网上资料凤毛麟角）。</p>\n<p>“jdk1.8中的集合框架中的数据结构都默认实现了Spliterator。”（惭愧的是当时在看HashMap并没有注意到，由于Set代码行数少，反倒引起了关注。）看看下面的执行结果你是否能全部bingo呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">HashSet hs = <span class=\"keyword\">new</span> HashSet();</div><div class=\"line\">\t\t  </div><div class=\"line\">hs.add(<span class=\"string\">\"c\"</span>);</div><div class=\"line\">hs.add(<span class=\"string\">\"h\"</span>);</div><div class=\"line\">hs.add(<span class=\"string\">\"e\"</span>);</div><div class=\"line\"></div><div class=\"line\">Spliterator&lt;String&gt; spliterator = hs.spliterator();</div><div class=\"line\"></div><div class=\"line\">System.out.println(<span class=\"string\">\"characteristics:\"</span>+spliterator.characteristics());</div><div class=\"line\"></div><div class=\"line\">Spliterator&lt;String&gt; spliterator2 = spliterator.trySplit();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(spliterator.tryAdvance(t -&gt; System.out.println(<span class=\"string\">\"tryAdvance:\"</span>+t.toString())));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(spliterator2.tryAdvance(t -&gt; System.out.println(<span class=\"string\">\"trySplit:\"</span>+t.toString())));</div><div class=\"line\"></div><div class=\"line\">System.out.println(<span class=\"string\">\"characteristics:\"</span>+spliterator.characteristics());</div><div class=\"line\"></div><div class=\"line\">hs.spliterator().forEachRemaining(t -&gt; System.out.println(<span class=\"string\">\"forEachRemaining:\"</span>+t.toString()));</div></pre></td></tr></table></figure>\n<h2 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Constructs a new, empty linked hash set.  (This package private</div><div class=\"line\"> * constructor is only used by LinkedHashSet.) The backing</div><div class=\"line\"> * HashMap instance is a LinkedHashMap with the specified initial</div><div class=\"line\"> * capacity and the specified load factor.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span>      initialCapacity   the initial capacity of the hash map</div><div class=\"line\"> * <span class=\"doctag\">@param</span>      loadFactor        the load factor of the hash map</div><div class=\"line\"> * <span class=\"doctag\">@param</span>      dummy             ignored (distinguishes this</div><div class=\"line\"> *             constructor from other int, float constructor.)</div><div class=\"line\"> * <span class=\"doctag\">@throws</span>     IllegalArgumentException if the initial capacity is less</div><div class=\"line\"> *             than zero, or if the load factor is nonpositive</div><div class=\"line\"> */</div><div class=\"line\">HashSet(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor, <span class=\"keyword\">boolean</span> dummy) &#123;</div><div class=\"line\">    map = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>增加dummy标志与HashSet(int initialCapacity, float loadFactor, boolean dummy)构造方法区分开来，供LinkedHashSet调用。</p>\n<h2 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h2><p>略。（是不是有种翻阅课后答案参考书的感觉- -）</p>\n<h2 id=\"说点什么：\"><a href=\"#说点什么：\" class=\"headerlink\" title=\"说点什么：\"></a>说点什么：</h2><p>HashSet无序；允许值为null；非线程安全；底层增删等操作基于HashMap实现；</p>\n<p>LinkedHashSet有序；允许值为null；非线程安全；依赖于HashSet，底层增删等操作基于LinkedHashMap实现；</p>\n<p>TreeSet有序；不允许为null；非线程安全；底层增删等操作基于TreeMap实现。</p>\n<p>从查阅Spliterator相关资料的感受就是J8的一些技术点在国内应用貌似还不是那么普及。③中举了25个java.util.Spliterators在实际项目中的应用，感兴趣的同学可以深入学习。</p>\n<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p>① <a href=\"http://www.aichengxu.com/java/24652525.htm\" target=\"_blank\" rel=\"external\">java序列化用法以及理论(三)</a>;</p>\n<p>② <a href=\"http://bluepopopo.iteye.com/blog/486548\" target=\"_blank\" rel=\"external\">什么是writeObject 和readObject？可定制的序列化过程【译】</a>；</p>\n<p>③ <a href=\"http://www.programcreek.com/java-api-examples/index.php?api=java.util.Spliterators\" target=\"_blank\" rel=\"external\">Java Code Examples for java.util.Spliterators</a>；</p>\n"},{"title":"【java源码一带一路系列】之TreeMap","url":"http://rebey.cn/2017/06/03/【java源码一带一路系列】之TreeMap/","content":"<pre><code>TreeMap基于红黑树实现，在之前HashMap篇章中有所涉及，所以本篇重点不在此。上路~\n</code></pre><h2 id=\"containsKey-–-gt-getEntry-–-gt-getEntryUsingComparator\"><a href=\"#containsKey-–-gt-getEntry-–-gt-getEntryUsingComparator\" class=\"headerlink\" title=\"containsKey() –&gt; getEntry() –&gt; getEntryUsingComparator()\"></a>containsKey() –&gt; getEntry() –&gt; getEntryUsingComparator()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if this map contains a mapping for the specified</div><div class=\"line\"> * key.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> key key whose presence in this map is to be tested</div><div class=\"line\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this map contains a mapping for the</div><div class=\"line\"> *         specified key</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ClassCastException if the specified key cannot be compared</div><div class=\"line\"> *         with the keys currently in the map</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if the specified key is null</div><div class=\"line\"> *         and this map uses natural ordering, or its comparator</div><div class=\"line\"> *         does not permit null keys</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getEntry(key) != <span class=\"keyword\">null</span>; <span class=\"comment\">// Key不能为null </span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns this map's entry for the given key, or &#123;<span class=\"doctag\">@code</span> null&#125; if the map</div><div class=\"line\"> * does not contain an entry for the key.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> this map's entry for the given key, or &#123;<span class=\"doctag\">@code</span> null&#125; if the map</div><div class=\"line\"> *         does not contain an entry for the key</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ClassCastException if the specified key cannot be compared</div><div class=\"line\"> *         with the keys currently in the map</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if the specified key is null</div><div class=\"line\"> *         and this map uses natural ordering, or its comparator</div><div class=\"line\"> *         does not permit null keys</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">getEntry</span><span class=\"params\">(Object key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Offload comparator-based version for sake of performance</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (comparator != <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> getEntryUsingComparator(key);</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">        Comparable&lt;? <span class=\"keyword\">super</span> K&gt; k = (Comparable&lt;? <span class=\"keyword\">super</span> K&gt;) key;</div><div class=\"line\">    Entry&lt;K,V&gt; p = root;</div><div class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> cmp = k.compareTo(p.key);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</div><div class=\"line\">            p = p.left;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            p = p.right;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Version of getEntry using comparator. Split off from getEntry</div><div class=\"line\"> * for performance. (This is not worth doing for most methods,</div><div class=\"line\"> * that are less dependent on comparator performance, but is</div><div class=\"line\"> * worthwhile here.)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">getEntryUsingComparator</span><span class=\"params\">(Object key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">        K k = (K) key;</div><div class=\"line\">    Comparator&lt;? <span class=\"keyword\">super</span> K&gt; cpr = comparator;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cpr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Entry&lt;K,V&gt; p = root;</div><div class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> cmp = cpr.compare(k, p.key);</div><div class=\"line\">            <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</div><div class=\"line\">                p = p.left;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                p = p.right;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                <span class=\"keyword\">return</span> p;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虽然明面上是获取值的方法，本质却是比出个高低等。这里将Java的java.util.Comparator（比较器排序）、java.lang.Comparable（自然排序）都用到了。顺便补了两者知识点(见文末①)。当然这里好奇的是源码中将使用comparator比较独立提成方法，说是能提高性能。why?反向思考下，假使将getEntryUsingComparator()方法内代码放回getEntry()似乎也就多了一对“{}”。费解- -</p>\n<p>顺带一提，如果你还记得之前文章中的HashMap也用到了红黑树，而它先比较的hash再比key值，这比较的是key值。</p>\n<h2 id=\"put-–-gt-compare-–-gt-fixAfterInsertion\"><a href=\"#put-–-gt-compare-–-gt-fixAfterInsertion\" class=\"headerlink\" title=\"put() –&gt; compare() –&gt; fixAfterInsertion()\"></a>put() –&gt; compare() –&gt; fixAfterInsertion()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Associates the specified value with the specified key in this map.</div><div class=\"line\"> * If the map previously contained a mapping for the key, the old</div><div class=\"line\"> * value is replaced.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> key key with which the specified value is to be associated</div><div class=\"line\"> * <span class=\"doctag\">@param</span> value value to be associated with the specified key</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span> the previous value associated with &#123;<span class=\"doctag\">@code</span> key&#125;, or</div><div class=\"line\"> *         &#123;<span class=\"doctag\">@code</span> null&#125; if there was no mapping for &#123;<span class=\"doctag\">@code</span> key&#125;.</div><div class=\"line\"> *         (A &#123;<span class=\"doctag\">@code</span> null&#125; return can also indicate that the map</div><div class=\"line\"> *         previously associated &#123;<span class=\"doctag\">@code</span> null&#125; with &#123;<span class=\"doctag\">@code</span> key&#125;.)</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> ClassCastException if the specified key cannot be compared</div><div class=\"line\"> *         with the keys currently in the map</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if the specified key is null</div><div class=\"line\"> *         and this map uses natural ordering, or its comparator</div><div class=\"line\"> *         does not permit null keys</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">    Entry&lt;K,V&gt; t = root;</div><div class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        compare(key, key); <span class=\"comment\">// type (and possibly null) check</span></div><div class=\"line\"></div><div class=\"line\">        root = <span class=\"keyword\">new</span> Entry&lt;&gt;(key, value, <span class=\"keyword\">null</span>);</div><div class=\"line\">        size = <span class=\"number\">1</span>;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> cmp;</div><div class=\"line\">    Entry&lt;K,V&gt; parent;</div><div class=\"line\">    <span class=\"comment\">// split comparator and comparable paths</span></div><div class=\"line\">    Comparator&lt;? <span class=\"keyword\">super</span> K&gt; cpr = comparator;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cpr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            parent = t;</div><div class=\"line\">            cmp = cpr.compare(key, t.key);</div><div class=\"line\">            <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</div><div class=\"line\">                t = t.left;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                t = t.right;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                <span class=\"keyword\">return</span> t.setValue(value);</div><div class=\"line\">        &#125; <span class=\"keyword\">while</span> (t != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            Comparable&lt;? <span class=\"keyword\">super</span> K&gt; k = (Comparable&lt;? <span class=\"keyword\">super</span> K&gt;) key;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            parent = t;</div><div class=\"line\">            cmp = k.compareTo(t.key);</div><div class=\"line\">            <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</div><div class=\"line\">                t = t.left;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                t = t.right;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                <span class=\"keyword\">return</span> t.setValue(value);</div><div class=\"line\">        &#125; <span class=\"keyword\">while</span> (t != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Entry&lt;K,V&gt; e = <span class=\"keyword\">new</span> Entry&lt;&gt;(key, value, parent);</div><div class=\"line\">    <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        parent.left = e;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        parent.right = e;</div><div class=\"line\">    fixAfterInsertion(e);</div><div class=\"line\">    size++;</div><div class=\"line\">    modCount++;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Compares two keys using the correct comparison method for this TreeMap.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object k1, Object k2)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> comparator==<span class=\"keyword\">null</span> ? ((Comparable&lt;? <span class=\"keyword\">super</span> K&gt;)k1).compareTo((K)k2)</div><div class=\"line\">        : comparator.compare((K)k1, (K)k2);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** From CLR */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fixAfterInsertion</span><span class=\"params\">(Entry&lt;K,V&gt; x)</span> </span>&#123;</div><div class=\"line\">    x.color = RED;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"keyword\">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</div><div class=\"line\">            <span class=\"keyword\">if</span> (colorOf(y) == RED) &#123;</div><div class=\"line\">                setColor(parentOf(x), BLACK);</div><div class=\"line\">                setColor(y, BLACK);</div><div class=\"line\">                setColor(parentOf(parentOf(x)), RED);</div><div class=\"line\">                x = parentOf(parentOf(x));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x == rightOf(parentOf(x))) &#123;</div><div class=\"line\">                    x = parentOf(x);</div><div class=\"line\">                    rotateLeft(x);</div><div class=\"line\">                &#125;</div><div class=\"line\">                setColor(parentOf(x), BLACK);</div><div class=\"line\">                setColor(parentOf(parentOf(x)), RED);</div><div class=\"line\">                rotateRight(parentOf(parentOf(x)));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</div><div class=\"line\">            <span class=\"keyword\">if</span> (colorOf(y) == RED) &#123;</div><div class=\"line\">                setColor(parentOf(x), BLACK);</div><div class=\"line\">                setColor(y, BLACK);</div><div class=\"line\">                setColor(parentOf(parentOf(x)), RED);</div><div class=\"line\">                x = parentOf(parentOf(x));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x == leftOf(parentOf(x))) &#123;</div><div class=\"line\">                    x = parentOf(x);</div><div class=\"line\">                    rotateRight(x);</div><div class=\"line\">                &#125;</div><div class=\"line\">                setColor(parentOf(x), BLACK);</div><div class=\"line\">                setColor(parentOf(parentOf(x)), RED);</div><div class=\"line\">                rotateLeft(parentOf(parentOf(x)));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    root.color = BLACK;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>“compare(key, key);”是一个有意思写法。从注释直译就是类型（为null可能性）检查。为空检查很好理解，因为null.xx()肯定跑异常，至于类型检查笔者理解是要求键值实现Comparable接口。</p>\n<blockquote>\n<p>“from CLR”是指Cormen, Leiserson, Rivest，他们是算法导论的作者，也就是说TreeMap里面算法都是参照算法导论的伪代码。</p>\n</blockquote>\n<p>由于TreeMap的有序性，使其增删查都是先进行比较，找到合适的位置。fixAfterInsertion()在这的作用类似HashMap中的balanceInsertion()，修复红黑树性质。</p>\n<h2 id=\"deleteEntry-–-gt-successor-–-gt-fixAfterDeletion\"><a href=\"#deleteEntry-–-gt-successor-–-gt-fixAfterDeletion\" class=\"headerlink\" title=\"deleteEntry() –&gt; successor() –&gt; fixAfterDeletion()\"></a>deleteEntry() –&gt; successor() –&gt; fixAfterDeletion()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Delete node p, and then rebalance the tree.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteEntry</span><span class=\"params\">(Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class=\"line\">    modCount++;</div><div class=\"line\">    size--;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If strictly internal, copy successor's element to p and then make p</span></div><div class=\"line\">    <span class=\"comment\">// point to successor.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (p.left != <span class=\"keyword\">null</span> &amp;&amp; p.right != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        Entry&lt;K,V&gt; s = successor(p);</div><div class=\"line\">        p.key = s.key;</div><div class=\"line\">        p.value = s.value;</div><div class=\"line\">        p = s;</div><div class=\"line\">    &#125; <span class=\"comment\">// p has 2 children</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Start fixup at replacement node, if it exists.</span></div><div class=\"line\">    Entry&lt;K,V&gt; replacement = (p.left != <span class=\"keyword\">null</span> ? p.left : p.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (replacement != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Link replacement to parent</span></div><div class=\"line\">        replacement.parent = p.parent;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p.parent == <span class=\"keyword\">null</span>)</div><div class=\"line\">            root = replacement;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == p.parent.left)</div><div class=\"line\">            p.parent.left  = replacement;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            p.parent.right = replacement;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Null out links so they are OK to use by fixAfterDeletion.</span></div><div class=\"line\">        p.left = p.right = p.parent = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Fix replacement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (p.color == BLACK)</div><div class=\"line\">            fixAfterDeletion(replacement);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p.parent == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// return if we are the only node.</span></div><div class=\"line\">        root = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//  No children. Use self as phantom replacement and unlink.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (p.color == BLACK)</div><div class=\"line\">            fixAfterDeletion(p);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (p.parent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == p.parent.left)</div><div class=\"line\">                p.parent.left = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == p.parent.right)</div><div class=\"line\">                p.parent.right = <span class=\"keyword\">null</span>;</div><div class=\"line\">            p.parent = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns the successor of the specified Entry, or null if no such.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; TreeMap.<span class=\"function\">Entry&lt;K,V&gt; <span class=\"title\">successor</span><span class=\"params\">(Entry&lt;K,V&gt; t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t.right != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// ① ②</span></div><div class=\"line\">        Entry&lt;K,V&gt; p = t.right;</div><div class=\"line\">        <span class=\"keyword\">while</span> (p.left != <span class=\"keyword\">null</span>)</div><div class=\"line\">            p = p.left;</div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//③ ④ ⑤</span></div><div class=\"line\">        Entry&lt;K,V&gt; p = t.parent;</div><div class=\"line\">        Entry&lt;K,V&gt; ch = t;</div><div class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; ch == p.right) &#123;</div><div class=\"line\">            ch = p;</div><div class=\"line\">            p = p.parent;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>successor()可以简单的理解为“一个升序数组a[index],successor即为a[index+1]”。相对的还有prodecessor()。源码中可能出现的情况抽象如下图（while只举一次循环为例）。<br><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/TreeMap.successor.png\" alt=\"successor\"></p>\n<p>deleteEntry调用successor时，由于right != null，所以不会出现③ ④ ⑤的情况。基本思路就是找到“a[index+1]”（p）替换待删节点，然后使“a[index+1]”的子节点（replacement）指向其父节点（Link replacement to parent）,最后清p、fixAfterDeletion修复红黑树性。</p>\n<p>如果觉得这个看懂了，可以挑战下HashMap.TreeNode.removeTreeNode()。</p>\n<h2 id=\"说点什么：\"><a href=\"#说点什么：\" class=\"headerlink\" title=\"说点什么：\"></a>说点什么：</h2><p>TreeMap 有序；非线程安全；key值不支持null…;</p>\n<p>实现了NavigableMap接口(见文末②)，NavigableMap具有了针对给定搜索目标返回最接近匹配项的导航方法。</p>\n<blockquote>\n<p>如： lowerEntry、floorEntry、ceilingEntry 和 higherEntry 分别返回与小于、小于等于、大于等于、大于给定键的 Map.Entry对象，如果不存在这样的键，则返回 null。</p>\n</blockquote>\n<p>实现了SortedMap接口：它用来保持键的有序顺序,也提供了范围检索的一些方法;</p>\n<blockquote>\n<p>如： headMap、subMap、tailMap分别返回小于结束键、大于或等于开始和小于结束键、大于或等于开始键的Map.Entry对象。</p>\n<p>添加到SortedMap实现类的元素必须实现Comparable接口，否则您必须给它的构造函数提供一个Comparator接口的实现。TreeMap类是它的唯一一份实现。</p>\n</blockquote>\n<h2 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h2><p>①<a href=\"http://www.bitscn.com/pdb/java/201611/755489.html\" target=\"_blank\" rel=\"external\">Java中自然排序和比较器排序详解</a>:Comparable与Comparator；</p>\n<p>②<a href=\"http://www.cnblogs.com/swiftma/p/5975943.html\" target=\"_blank\" rel=\"external\">计算机程序的思维逻辑 (43) - 剖析TreeMap</a>：方法应用举例;</p>\n"},{"title":"【java源码一带一路系列】之Hashtable","url":"http://rebey.cn/2017/05/28/【java源码一带一路系列】之Hashtable/","content":"<pre><code>从上往下看的源码，标注了路上一些“景点”。皮皮虾，我们走。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Constructs a new hashtable with the same mappings as the given</div><div class=\"line\"> * Map.  The hashtable is created with an initial capacity sufficient to</div><div class=\"line\"> * hold the mappings in the given Map and a default load factor (0.75).</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> t the map whose mappings are to be placed in this map.</div><div class=\"line\"> * <span class=\"doctag\">@throws</span> NullPointerException if the specified map is null.</div><div class=\"line\"> * <span class=\"doctag\">@since</span>   1.2</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Hashtable</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(Math.max(<span class=\"number\">2</span>*t.size(), <span class=\"number\">11</span>), <span class=\"number\">0.75f</span>);</div><div class=\"line\">    putAll(t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>initialCapacity不指定的话是默认11；</p>\n<p>这里单独列出这个初始化方法，主要是因为这个2*t.size()，如果你还记得的话，在第二路文中介绍HashMap.resize()时，它就是按2扩容的。</p>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns an enumeration of the keys in this hashtable.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  an enumeration of the keys in this hashtable.</div><div class=\"line\"> * <span class=\"doctag\">@see</span>     Enumeration</div><div class=\"line\"> * <span class=\"doctag\">@see</span>     #elements()</div><div class=\"line\"> * <span class=\"doctag\">@see</span>     #keySet()</div><div class=\"line\"> * <span class=\"doctag\">@see</span>     Map</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Enumeration&lt;K&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.&lt;K&gt;getEnumeration(KEYS);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Types of Enumerations/Iterations</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> KEYS = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> VALUES = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ENTRIES = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>看到synchronized想说的是HashTable是同步，所以大多数方法都可见进行了同步处理，这点与HashMap不同（其他差别：HashTable的key、value都不允许为null）。该方法通过Enumeration遍历Hashtable的键（KEYS是定义的全局变量），类似的，还有通过Enumeration遍历Hashtable的值。感兴趣的同学可以继续跟getEnumeration()，它返回的是一个hashtable内部实现的Enumerator类（实现了Enumeration, Iterator）。<br>应用实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enumeration enu = table.keys();</div><div class=\"line\"><span class=\"keyword\">while</span>(enu.hasMoreElements()) &#123;</div><div class=\"line\">    System.out.println(enu.nextElement());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * The maximum size of array to allocate.</div><div class=\"line\"> * Some VMs reserve some header words in an array.</div><div class=\"line\"> * Attempts to allocate larger arrays may result in</div><div class=\"line\"> * OutOfMemoryError: Requested array size exceeds VM limit</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</div></pre></td></tr></table></figure>\n<p>这里好奇的是“-8”从何而来？从<a href=\"https://stackoverflow.com/questions/35756277/why-the-maximum-array-size-of-arraylist-is-integer-max-value-8\" target=\"_blank\" rel=\"external\">stackoverflow</a>得到的答案是（译）：</p>\n<blockquote>\n<p>数组(ARRAY)需要用8bytes来存储（2^31 = 2,147,483,648 ）大小(size)。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Increases the capacity of and internally reorganizes this</div><div class=\"line\"> * hashtable, in order to accommodate and access its entries more</div><div class=\"line\"> * efficiently.  This method is called automatically when the</div><div class=\"line\"> * number of keys in the hashtable exceeds this hashtable's capacity</div><div class=\"line\"> * and load factor.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">rehash</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = table.length;</div><div class=\"line\">    Entry&lt;?,?&gt;[] oldMap = table;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></div><div class=\"line\">    <span class=\"keyword\">int</span> newCapacity = (oldCapacity &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (oldCapacity == MAX_ARRAY_SIZE)</div><div class=\"line\">            <span class=\"comment\">// Keep running with MAX_ARRAY_SIZE buckets</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        newCapacity = MAX_ARRAY_SIZE;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Entry&lt;?,?&gt;[] newMap = <span class=\"keyword\">new</span> Entry&lt;?,?&gt;[newCapacity];</div><div class=\"line\"></div><div class=\"line\">    modCount++;</div><div class=\"line\">    threshold = (<span class=\"keyword\">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class=\"number\">1</span>);</div><div class=\"line\">    table = newMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = oldCapacity ; i-- &gt; <span class=\"number\">0</span> ;) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class=\"keyword\">null</span> ; ) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; e = old;</div><div class=\"line\">            old = old.next;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> index = (e.hash &amp; <span class=\"number\">0x7FFFFFFF</span>) % newCapacity;</div><div class=\"line\">            e.next = (Entry&lt;K,V&gt;)newMap[index];</div><div class=\"line\">            newMap[index] = e;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>hashtable的新容量是：2倍+1，即始终为奇数。不同于前2回讲过的hashmap中resize()则是2倍。why?我们知道“除2以外所有的素数都是奇数”，而当哈希表的大小为素数时，简单的取模哈希的结果分布更加均匀，从而降低哈希冲突。</p>\n<p>“0x7FFFFFFF”即二进制的32个1，按位与运算后使得结果范围在区间[0,2147483647]内，可以理解为取正。</p>\n<p>此外，for循环中的新旧数据迁移的5行代码也很经典。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * Creates a shallow copy of this hashtable. All the structure of the</div><div class=\"line\"> * hashtable itself is copied, but the keys and values are not cloned.</div><div class=\"line\"> * This is a relatively expensive operation.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  a clone of the hashtable</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Hashtable&lt;?,?&gt; t = (Hashtable&lt;?,?&gt;)<span class=\"keyword\">super</span>.clone();</div><div class=\"line\">        t.table = <span class=\"keyword\">new</span> Entry&lt;?,?&gt;[table.length];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = table.length ; i-- &gt; <span class=\"number\">0</span> ; ) &#123;</div><div class=\"line\">            t.table[i] = (table[i] != <span class=\"keyword\">null</span>)</div><div class=\"line\">                ? (Entry&lt;?,?&gt;) table[i].clone() : <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        t.keySet = <span class=\"keyword\">null</span>;</div><div class=\"line\">        t.entrySet = <span class=\"keyword\">null</span>;</div><div class=\"line\">        t.values = <span class=\"keyword\">null</span>;</div><div class=\"line\">        t.modCount = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> t;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">        <span class=\"comment\">// this shouldn't happen, since we are Cloneable</span></div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>“shallow copy”一词成功引起了笔者注意。what is it?浅拷贝非java独有的概念，其他编程语言同样存在，如C#、C++、IOS、python等。与之对应的是深拷贝(deep copy)。两者的区别是：</p>\n<blockquote>\n<p>对象的浅拷贝会对“主”对象进行拷贝，但不会复制主对象里面的对象。”里面的对象“会在原来的对象和它的副本之间共享。深拷贝是一个整个独立的对象拷贝。[参考文献2]</p>\n</blockquote>\n<p>“I have a pen, I have a apple.”（唱起来了） 我，笔，苹果是三个对象，我引用了笔和苹果，此时对我进行拷贝，效果如图：<br><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/HashTable-shallow%20copy.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> </span>&#123;</div><div class=\"line\">\tString color;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getColor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> color;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setColor</span><span class=\"params\">(String color)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Apple apple = <span class=\"keyword\">new</span> Apple();</div><div class=\"line\">apple.setColor(<span class=\"string\">\"red\"</span>);</div><div class=\"line\"></div><div class=\"line\">Hashtable ht = <span class=\"keyword\">new</span> Hashtable();</div><div class=\"line\">ht.put(<span class=\"string\">\"apple\"</span>, apple);</div><div class=\"line\">System.out.println(((Apple)ht.get(<span class=\"string\">\"apple\"</span>)).getColor());</div><div class=\"line\"></div><div class=\"line\">Hashtable htc = (Hashtable) ht.clone();</div><div class=\"line\">System.out.println(((Apple)htc.get(<span class=\"string\">\"apple\"</span>)).getColor());</div><div class=\"line\"></div><div class=\"line\">((Apple)htc.get(<span class=\"string\">\"apple\"</span>)).setColor(<span class=\"string\">\"green\"</span>);</div><div class=\"line\">System.out.println(((Apple)ht.get(<span class=\"string\">\"apple\"</span>)).getColor());</div><div class=\"line\">System.out.println(((Apple)htc.get(<span class=\"string\">\"apple\"</span>)).getColor());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果：</span></div><div class=\"line\"><span class=\"comment\">//red</span></div><div class=\"line\"><span class=\"comment\">//red</span></div><div class=\"line\"><span class=\"comment\">//green</span></div><div class=\"line\"><span class=\"comment\">//green</span></div><div class=\"line\"><span class=\"comment\">//浅拷贝的hashtable共用一个苹果</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns a string representation of this &lt;tt&gt;Hashtable&lt;/tt&gt; object</div><div class=\"line\"> * in the form of a set of entries, enclosed in braces and separated</div><div class=\"line\"> * by the ASCII characters \"&lt;tt&gt;,&amp;nbsp;&lt;/tt&gt;\" (comma and space). Each</div><div class=\"line\"> * entry is rendered as the key, an equals sign &lt;tt&gt;=&lt;/tt&gt;, and the</div><div class=\"line\"> * associated element, where the &lt;tt&gt;toString&lt;/tt&gt; method is used to</div><div class=\"line\"> * convert the key and element to strings.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  a string representation of this hashtable</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> max = size() - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (max == -<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; it = entrySet().iterator();</div><div class=\"line\"></div><div class=\"line\">    sb.append(<span class=\"string\">'&#123;'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</div><div class=\"line\">        Map.Entry&lt;K,V&gt; e = it.next();</div><div class=\"line\">        K key = e.getKey();</div><div class=\"line\">        V value = e.getValue();</div><div class=\"line\">        sb.append(key   == <span class=\"keyword\">this</span> ? <span class=\"string\">\"(this Map)\"</span> : key.toString());</div><div class=\"line\">        sb.append(<span class=\"string\">'='</span>);</div><div class=\"line\">        sb.append(value == <span class=\"keyword\">this</span> ? <span class=\"string\">\"(this Map)\"</span> : value.toString());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (i == max)</div><div class=\"line\">            <span class=\"keyword\">return</span> sb.append(<span class=\"string\">'&#125;'</span>).toString();</div><div class=\"line\">        sb.append(<span class=\"string\">\", \"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>“(this Map)”，即，ht.put(ht, ht)将输出{(this Map)=(this Map)}。</p>\n<p>还有同步处理用到的volatile关键字（各个线程在访问该关键字所修饰变量前必须从主存（共享内存）中读取该变量的值）、Collections.synchronizedSet()（创建同步的集合对象）有缘再续。</p>\n<h2 id=\"参考文献-推荐-：\"><a href=\"#参考文献-推荐-：\" class=\"headerlink\" title=\"参考文献[推荐]：\"></a>参考文献[推荐]：</h2><p>1.<a href=\"http://www.cnblogs.com/xinzhao/p/5644175.html\" target=\"_blank\" rel=\"external\">HashMap和HashTable到底哪不同？</a>,2016-07-05;</p>\n<p>2.<a href=\"http://www.oschina.net/translate/java-copy-shallow-vs-deep-in-which-you-will-swim?cmp\" target=\"_blank\" rel=\"external\">Java 中的浅拷贝与深拷贝(Shallow vs. Deep Copy in Java )</a>,中英;</p>\n<p>3.<a href=\"http://www.jianshu.com/p/387a04a78c84\" target=\"_blank\" rel=\"external\">Java基础之volatile关键字</a>,2016-07-18;</p>\n"},{"title":"【java源码一带一路系列】之LinkedHashMap.afterNodeAccess()","url":"http://rebey.cn/2017/05/21/【java源码一带一路系列】之LinkedHashMap.afterNodeAccess/","content":"<p>本文以jdk1.8中LinkedHashMap.afterNodeAccess()方法为切入点，分析其中难理解、有价值的源码片段（类似源码查看是ctrl+鼠标左键的过程）。观光线路图：afterNodeAccess() –&gt; afterNodeInsertion() –&gt; removeEldestEntry() –&gt; afterNodeRemoval() –&gt; internalWriteEntries() …</p>\n<h2 id=\"☞-afterNodeAccess\"><a href=\"#☞-afterNodeAccess\" class=\"headerlink\" title=\"☞ afterNodeAccess() \"></a>☞ afterNodeAccess() </h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeAccess</span><span class=\"params\">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class=\"comment\">// move node to last</span></div><div class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; last;</div><div class=\"line\">    <span class=\"keyword\">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</div><div class=\"line\">        LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class=\"line\">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class=\"line\">        p.after = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"keyword\">null</span>)</div><div class=\"line\">            head = a;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            b.after = a;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a != <span class=\"keyword\">null</span>)</div><div class=\"line\">            a.before = b;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            last = b;</div><div class=\"line\">        <span class=\"keyword\">if</span> (last == <span class=\"keyword\">null</span>)</div><div class=\"line\">            head = p;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            p.before = last;</div><div class=\"line\">            last.after = p;</div><div class=\"line\">        &#125;</div><div class=\"line\">        tail = p;</div><div class=\"line\">        ++modCount;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//////////////////////////////// 涉及变量如下：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * The head (eldest) of the doubly linked list.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * The tail (youngest) of the doubly linked list.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</div><div class=\"line\"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@serial</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> accessOrder;</div></pre></td></tr></table></figure>\n<p>上回在HashMap.afterNodeAccess()中说道，“是为LinkedHashMap留的后路”。如今行至于此，当观赏一方。首先需要了解的是LinkedHashMap相比HashMap多了有序性，由双向链表(before,after)实现。源码出现了一些全局变量：</p>\n<p>accessOrder：<em>true:按访问顺序排序（LRU），false:按插入顺序排序</em>；</p>\n<p>head、tail：<em>存放链表首尾</em>；</p>\n<p>可见仅有accessOrder为true时，且访问节点不等于尾节点时，该方法才有意义。通过before、after重定向，将新访问节点链接为链表尾节点。</p>\n<h2 id=\"☞-afterNodeInsertion\"><a href=\"#☞-afterNodeInsertion\" class=\"headerlink\" title=\"☞ afterNodeInsertion() \"></a>☞ afterNodeInsertion() </h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeInsertion</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evict)</span> </span>&#123; <span class=\"comment\">// possibly remove eldest</span></div><div class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; first;</div><div class=\"line\">    <span class=\"keyword\">if</span> (evict &amp;&amp; (first = head) != <span class=\"keyword\">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</div><div class=\"line\">        K key = first.key;</div><div class=\"line\">        removeNode(hash(key), key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeEldestEntry</span><span class=\"params\">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>细心的你也花现了吧。afterNodeInsertion()由于removeEldestEntry()所返回的false无执行意义。也就意味着如果想要让它有意义必须重写removeEldestEntry()。</p>\n<p>如，使用LinkedHashMap实现一个简单的LRU（Least Recently Used）Cache。那么就应该重写removeEldestEntry(),当超出缓存容器大小时移除最老的首节点（这里不考虑并发问题，如下）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeEldestEntry</span><span class=\"params\">(Map.Entry&lt;K, V&gt; eldest)</span></span>&#123;       </div><div class=\"line\">    <span class=\"keyword\">return</span> size() &gt; capacity;          </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"☞-afterNodeRemoval\"><a href=\"#☞-afterNodeRemoval\" class=\"headerlink\" title=\"☞ afterNodeRemoval() \"></a>☞ afterNodeRemoval() </h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeRemoval</span><span class=\"params\">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class=\"comment\">// unlink</span></div><div class=\"line\">        LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class=\"line\">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class=\"line\">        p.before = p.after = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"keyword\">null</span>)</div><div class=\"line\">            head = a;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            b.after = a;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>)</div><div class=\"line\">            tail = b;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            a.before = b;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>afterNodeRemoval()方法相对简单，就是在删除后处理其对应链表前后关系（刨掉一截）。</p>\n<h2 id=\"☞-internalWriteEntries\"><a href=\"#☞-internalWriteEntries\" class=\"headerlink\" title=\"☞ internalWriteEntries() \"></a>☞ internalWriteEntries() </h2><p>LinkedHashMap源码阅读总体门槛相对而言比HashMap，毕竟大多数底层put,get都由HashMap实现了。internalWriteEntries()相对来说比较突兀，如果你知道它在哪里起着什么样神秘的作用请在评论里告诉在下吧。[比心❤]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">internalWriteEntries</span><span class=\"params\">(java.io.ObjectOutputStream s)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class=\"keyword\">null</span>; e = e.after) &#123;</div><div class=\"line\">        s.writeObject(e.key);</div><div class=\"line\">        s.writeObject(e.value);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>可通过这篇文章理解创建一个LinkedHashMap实例过程（图）：</p>\n<p><a href=\"http://blog.csdn.net/qq_28051453/article/details/71169801\" target=\"_blank\" rel=\"external\">Java_LinkedHashMap工作原理</a> 2017-05-04；</p>\n"},{"title":"【java源码一带一路系列】之HashMap.compute()","url":"http://rebey.cn/2017/05/20/【java源码一带一路系列】之HashMap.compute()/","content":"<p>本文以jdk1.8中HashMap.compute()方法为切入点，分析其中难理解、有价值的源码片段（类似源码查看是ctrl+鼠标左键的过程）。本篇涉及少许Java8（以下简称J8）新特性，请驴友们系好安全带，准备开车。观光线路图：compute() –&gt; BiFunction –&gt; @FunctionalInterface –&gt; afterNodeAccess() –&gt; computeIfAbsent() –&gt; computeIfPresent()…</p>\n<h2 id=\"☞-compute\"><a href=\"#☞-compute\" class=\"headerlink\" title=\"☞ compute() \"></a>☞ compute() </h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">compute</span><span class=\"params\">(K key,</span></span></div><div class=\"line\">                 BiFunction&lt;? <span class=\"keyword\">super</span> K, ? <span class=\"keyword\">super</span> V, ? extends V&gt; remappingFunction) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (remappingFunction == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; <span class=\"keyword\">int</span> n, i;</div><div class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode&lt;K,V&gt; t = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Node&lt;K,V&gt; old = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt; threshold || (tab = table) == <span class=\"keyword\">null</span> ||</div><div class=\"line\">        (n = tab.length) == <span class=\"number\">0</span>)</div><div class=\"line\">        n = (tab = resize()).length;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((first = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">            old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Node&lt;K,V&gt; e = first; K k;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</div><div class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class=\"line\">                    old = e;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ++binCount;</div><div class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    V oldValue = (old == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : old.value;</div><div class=\"line\">    V v = remappingFunction.apply(key, oldValue);</div><div class=\"line\">    <span class=\"keyword\">if</span> (old != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            old.value = v;</div><div class=\"line\">            afterNodeAccess(old);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            removeNode(hash, key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>)</div><div class=\"line\">            t.putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, v);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            tab[i] = newNode(hash, key, v, first);</div><div class=\"line\">            <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>)</div><div class=\"line\">                treeifyBin(tab, hash);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ++modCount;</div><div class=\"line\">        ++size;</div><div class=\"line\">        afterNodeInsertion(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>compute()是java8在Map中新增的一个方法，相对而言较为陌生。其作用是把remappingFunction的计算结果关联到key上（即remappingFunction返回值作为新value）。写一段它的简单应用的代码，并与“同级生”merge()类比加深理解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">HashMap map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">map.put(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"c\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"b\"</span>, <span class=\"string\">\"h\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"c\"</span>, <span class=\"string\">\"e\"</span>);</div><div class=\"line\"></div><div class=\"line\">map.compute(<span class=\"string\">\"a\"</span>, (k, v) -&gt; <span class=\"string\">\"C\"</span>) ;</div><div class=\"line\">map.merge(<span class=\"string\">\"b\"</span>, <span class=\"string\">\"h\"</span>, (k, v) -&gt; <span class=\"string\">\"H\"</span>) ;</div><div class=\"line\">map.compute(<span class=\"string\">\"d\"</span>, (k, v) -&gt; <span class=\"string\">\"D\"</span>) ;</div><div class=\"line\">map.merge(<span class=\"string\">\"c\"</span>, <span class=\"string\">\"e\"</span>, (k, v) -&gt; <span class=\"keyword\">null</span>) ;</div><div class=\"line\">System.out.println(map.toString()); </div><div class=\"line\"><span class=\"comment\">// 输出结果为：&#123;a=C, b=H, d=D&#125;</span></div></pre></td></tr></table></figure>\n<p>下面用一张表来总结源码最后的判断对应的操作：<br><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/HashMap-compute1.png\" alt=\"image\"></p>\n<h2 id=\"☞-BiFunction\"><a href=\"#☞-BiFunction\" class=\"headerlink\" title=\"☞  BiFunction\"></a>☞  BiFunction</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Represents a function that accepts two arguments and produces a result.</div><div class=\"line\"> * This is the two-arity specialization of &#123;<span class=\"doctag\">@link</span> Function&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;This is a &lt;a href=\"package-summary.html\"&gt;functional interface&lt;/a&gt;</div><div class=\"line\"> * whose functional method is &#123;<span class=\"doctag\">@link</span> #apply(Object, Object)&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> &lt;T&gt; the type of the first argument to the function</div><div class=\"line\"> * <span class=\"doctag\">@param</span> &lt;U&gt; the type of the second argument to the function</div><div class=\"line\"> * <span class=\"doctag\">@param</span> &lt;R&gt; the type of the result of the function</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> Function</div><div class=\"line\"> * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@FunctionalInterface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BiFunction</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">U</span>, <span class=\"title\">R</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Applies this function to the given arguments.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> t the first function argument</div><div class=\"line\">     * <span class=\"doctag\">@param</span> u the second function argument</div><div class=\"line\">     * <span class=\"doctag\">@return</span> the function result</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t, U u)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Returns a composed function that first applies this function to</div><div class=\"line\">     * its input, and then applies the &#123;<span class=\"doctag\">@code</span> after&#125; function to the result.</div><div class=\"line\">     * If evaluation of either function throws an exception, it is relayed to</div><div class=\"line\">     * the caller of the composed function.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> &lt;V&gt; the type of output of the &#123;<span class=\"doctag\">@code</span> after&#125; function, and of the</div><div class=\"line\">     *           composed function</div><div class=\"line\">     * <span class=\"doctag\">@param</span> after the function to apply after this function is applied</div><div class=\"line\">     * <span class=\"doctag\">@return</span> a composed function that first applies this function and then</div><div class=\"line\">     * applies the &#123;<span class=\"doctag\">@code</span> after&#125; function</div><div class=\"line\">     * <span class=\"doctag\">@throws</span> NullPointerException if after is null</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">BiFunction&lt;T, U, V&gt; <span class=\"title\">andThen</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> R, ? extends V&gt; after)</span> </span>&#123;</div><div class=\"line\">        Objects.requireNonNull(after);</div><div class=\"line\">        <span class=\"keyword\">return</span> (T t, U u) -&gt; after.apply(apply(t, u));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>是的，这也J8新增的梗。当我第一眼看到逼函数（BiFunction）的时候就原地炸了。实际上，“Bi”乃binary缩写，即“二元函数”之意（类似“1+1=2”）。这类接口称为“函数式接口”，可以看出，它的方法有方法体。且以“default”修饰符修饰，不影响接口的实现类，算是一种向下兼容吧。</p>\n<h2 id=\"☞-FunctionalInterface\"><a href=\"#☞-FunctionalInterface\" class=\"headerlink\" title=\"☞  @FunctionalInterface\"></a>☞  @FunctionalInterface</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * An informative annotation type used to indicate that an interface</div><div class=\"line\"> * type declaration is intended to be a &lt;i&gt;functional interface&lt;/i&gt; as</div><div class=\"line\"> * defined by the Java Language Specification.</div><div class=\"line\"> *</div><div class=\"line\"> * Conceptually, a functional interface has exactly one abstract</div><div class=\"line\"> * method.  Since &#123;<span class=\"doctag\">@linkplain</span> java.lang.reflect.Method#isDefault()</div><div class=\"line\"> * default methods&#125; have an implementation, they are not abstract.  If</div><div class=\"line\"> * an interface declares an abstract method overriding one of the</div><div class=\"line\"> * public methods of &#123;<span class=\"doctag\">@code</span> java.lang.Object&#125;, that also does</div><div class=\"line\"> * &lt;em&gt;not&lt;/em&gt; count toward the interface's abstract method count</div><div class=\"line\"> * since any implementation of the interface will have an</div><div class=\"line\"> * implementation from &#123;<span class=\"doctag\">@code</span> java.lang.Object&#125; or elsewhere.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;Note that instances of functional interfaces can be created with</div><div class=\"line\"> * lambda expressions, method references, or constructor references.</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;If a type is annotated with this annotation type, compilers are</div><div class=\"line\"> * required to generate an error message unless:</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;ul&gt;</div><div class=\"line\"> * &lt;li&gt; The type is an interface type and not an annotation type, enum, or class.</div><div class=\"line\"> * &lt;li&gt; The annotated type satisfies the requirements of a functional interface.</div><div class=\"line\"> * &lt;/ul&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * &lt;p&gt;However, the compiler will treat any interface meeting the</div><div class=\"line\"> * definition of a functional interface as a functional interface</div><div class=\"line\"> * regardless of whether or not a &#123;<span class=\"doctag\">@code</span> FunctionalInterface&#125;</div><div class=\"line\"> * annotation is present on the interface declaration.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@jls</span> 4.3.2. The Class Object</div><div class=\"line\"> * <span class=\"doctag\">@jls</span> 9.8 Functional Interfaces</div><div class=\"line\"> * <span class=\"doctag\">@jls</span> 9.4.3 Interface Method Body</div><div class=\"line\"> * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FunctionalInterface &#123;&#125;</div></pre></td></tr></table></figure>\n<p>“@FunctionalInterface”并非必须，就像javascript中的“use strict”,使得编译器能检查该接口是否存在语法错误。此外，从注释还可以看出：</p>\n<blockquote>\n<p>函数接口仅有一个抽象方法；</p>\n<p>default方法、Object的重载方法（、静态方法）非抽象方法；</p>\n</blockquote>\n<h2 id=\"☞-afterNodeAccess\"><a href=\"#☞-afterNodeAccess\" class=\"headerlink\" title=\"☞  afterNodeAccess()\"></a>☞  afterNodeAccess()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Callbacks to allow LinkedHashMap post-actions</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeAccess</span><span class=\"params\">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeInsertion</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evict)</span> </span>&#123; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeRemoval</span><span class=\"params\">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>从注释可以看到这是为LinkedHashMap留的后路，不过HashMap存取操作中经常发现他们的身影，即使实现为空。。</p>\n<h2 id=\"☞-computeIfAbsent-computeIfPresent\"><a href=\"#☞-computeIfAbsent-computeIfPresent\" class=\"headerlink\" title=\"☞  computeIfAbsent()/computeIfPresent()\"></a>☞  computeIfAbsent()/computeIfPresent()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">computeIfAbsent</span><span class=\"params\">(K key,</span></span></div><div class=\"line\">                         Function&lt;? <span class=\"keyword\">super</span> K, ? extends V&gt; mappingFunction) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mappingFunction == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; <span class=\"keyword\">int</span> n, i;</div><div class=\"line\">    <span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>;</div><div class=\"line\">    TreeNode&lt;K,V&gt; t = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Node&lt;K,V&gt; old = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt; threshold || (tab = table) == <span class=\"keyword\">null</span> ||</div><div class=\"line\">        (n = tab.length) == <span class=\"number\">0</span>)</div><div class=\"line\">        n = (tab = resize()).length;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((first = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">            old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Node&lt;K,V&gt; e = first; K k;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</div><div class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class=\"line\">                    old = e;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ++binCount;</div><div class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        V oldValue;</div><div class=\"line\">        <span class=\"keyword\">if</span> (old != <span class=\"keyword\">null</span> &amp;&amp; (oldValue = old.value) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            afterNodeAccess(old);</div><div class=\"line\">            <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    V v = mappingFunction.apply(key);</div><div class=\"line\">    <span class=\"keyword\">if</span> (v == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (old != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        old.value = v; <span class=\"comment\">// old.value null</span></div><div class=\"line\">        afterNodeAccess(old);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>)</div><div class=\"line\">        t.putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, v);</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        tab[i] = newNode(hash, key, v, first);</div><div class=\"line\">        <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>)</div><div class=\"line\">            treeifyBin(tab, hash);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ++modCount;</div><div class=\"line\">    ++size;</div><div class=\"line\">    afterNodeInsertion(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">computeIfPresent</span><span class=\"params\">(K key,</span></span></div><div class=\"line\">                          BiFunction&lt;? <span class=\"keyword\">super</span> K, ? <span class=\"keyword\">super</span> V, ? extends V&gt; remappingFunction) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (remappingFunction == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">    Node&lt;K,V&gt; e; V oldValue;</div><div class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</div><div class=\"line\">    <span class=\"keyword\">if</span> ((e = getNode(hash, key)) != <span class=\"keyword\">null</span> &amp;&amp;</div><div class=\"line\">        (oldValue = e.value) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        V v = remappingFunction.apply(key, oldValue);</div><div class=\"line\">        <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            e.value = v;</div><div class=\"line\">            afterNodeAccess(e);</div><div class=\"line\">            <span class=\"keyword\">return</span> v;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            removeNode(hash, key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>computeIfAbsent()与computeIfPresent()可以说是compute()的“子集”。</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/HashMap-compute.png\" alt=\"image\"></p>\n<p>这次的功夫主要花在了学习J8的知识点上，经过前2篇后HashMap本身不再那么可怕。你觉得呢？</p>\n<hr>\n<p><strong>更多有意思的内容，欢迎访问笔者小站：</strong> <a href=\"http://rebey.cn/\">rebey.cn</a></p>\n<hr>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><p>最后分享几个学习Java8过程中看到良心网址(以下链接为网站系列文章之一，希望细心的你举一反三)：</p>\n<p><a href=\"http://ifeve.com/stream/\" target=\"_blank\" rel=\"external\">Java8初体验（二）Stream语法详解</a>;</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/\" target=\"_blank\" rel=\"external\">Java 8 中的 Streams API 详解</a>;</p>\n<p><a href=\"http://www.mkyong.com/java8/java-8-flatmap-example/\" target=\"_blank\" rel=\"external\">Java 8 flatMap example</a>;</p>\n"},{"title":"【java源码一带一路系列】之HashMap.putVal()","url":"http://rebey.cn/2017/05/14/【java源码一带一路系列】之HashMap.putVal/","content":"<p>回顾<a href=\"https://segmentfault.com/a/1190000009324403\" target=\"_blank\" rel=\"external\">上期✈</a>观光线路图：putAll() –&gt; putMapEntries() –&gt; tableSizeFor() –&gt; resize() –&gt; hash() –&gt; putVal()…</p>\n<p>本期与您继续一起前进：putVal() –&gt; putTreeVal() –&gt; find() –&gt; balanceInsertion() –&gt; rotateLeft()/rotateRight() –&gt; treeifyBin()…</p>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 为了找到合适的位置插入新节点，源码中进行了一系列比较。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> TreeNode&lt;K,V&gt; <span class=\"title\">putTreeVal</span><span class=\"params\">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></div><div class=\"line\">                               <span class=\"keyword\">int</span> h, K k, V v) &#123;</div><div class=\"line\">    Class&lt;?&gt; kc = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> searched = <span class=\"keyword\">false</span>;</div><div class=\"line\">    TreeNode&lt;K,V&gt; root = (parent != <span class=\"keyword\">null</span>) ? root() : <span class=\"keyword\">this</span>; <span class=\"comment\">// 获取根节点，从根节点开始遍历</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> dir, ph; K pk;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</div><div class=\"line\">            dir = -<span class=\"number\">1</span>; <span class=\"comment\">// 左</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</div><div class=\"line\">            dir = <span class=\"number\">1</span>; <span class=\"comment\">// 右</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk)))</div><div class=\"line\">            <span class=\"keyword\">return</span> p; <span class=\"comment\">// 相等直接返回</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc == <span class=\"keyword\">null</span> &amp;&amp;</div><div class=\"line\">                  (kc = comparableClassFor(k)) == <span class=\"keyword\">null</span>) ||</div><div class=\"line\">                 (dir = compareComparables(kc, k, pk)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!searched) &#123;</div><div class=\"line\">                TreeNode&lt;K,V&gt; q, ch;</div><div class=\"line\">                searched = <span class=\"keyword\">true</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (((ch = p.left) != <span class=\"keyword\">null</span> &amp;&amp;</div><div class=\"line\">                     (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>) ||</div><div class=\"line\">                    ((ch = p.right) != <span class=\"keyword\">null</span> &amp;&amp;</div><div class=\"line\">                     (q = ch.find(h, k, kc)) != <span class=\"keyword\">null</span>))</div><div class=\"line\">                    <span class=\"keyword\">return</span> q;</div><div class=\"line\">            &#125;</div><div class=\"line\">            dir = tieBreakOrder(k, pk);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        TreeNode&lt;K,V&gt; xp = p;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((p = (dir &lt;= <span class=\"number\">0</span>) ? p.left : p.right) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            Node&lt;K,V&gt; xpn = xp.next;</div><div class=\"line\">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</div><div class=\"line\">            <span class=\"keyword\">if</span> (dir &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">                xp.left = x;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                xp.right = x;</div><div class=\"line\">            xp.next = x;</div><div class=\"line\">            x.parent = x.prev = xp;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xpn != <span class=\"keyword\">null</span>)</div><div class=\"line\">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</div><div class=\"line\">            moveRootToFront(tab, balanceInsertion(root, x));</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当前节点hash值(ph)与插入节点hash值(h)比较，<br>若ph &gt; h(dir=-1)，将新节点归为左子树;<br>若ph &lt; h(dir=1)，右子树;<br>否则即表示hash值相等，然后又对key进行了比较。</p>\n<p>“kc = comparableClassFor(k)) == null”表示该类本身不可比（class C don’t implements Comparable<c>）；“dir = compareComparables(kc, k, pk)) == 0”表示k与pk对应的Class之间不可比。searched为一次性开关仅在p为root时生效，遍历比较左右子树中是否存在于插入节点相等的。</c></p>\n<p>最后比到tieBreakOrder()中的“System.identityHashCode(a) &lt;= System.identityHashCode(b)”，即对象的内存地址来生成的hashCode相互比较。堪称铁杵磨成针的比较。</p>\n<p>这里循环的推进是靠“if ((p = (dir &lt;= 0) ? p.left : p.right) == null)”，之前千辛万苦比较出的dir也在这使用。直到为空的左/右子树节点，插入新值（新值插入的过程参考下图理解）。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://github.com/chenhongen/DemoRun/blob/master/image/putTreeVal.png?raw=true\" alt=\"image\"></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> TreeNode&lt;K,V&gt; <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</div><div class=\"line\">    TreeNode&lt;K,V&gt; p = <span class=\"keyword\">this</span>;</div><div class=\"line\">    do &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> ph, dir; K pk;</div><div class=\"line\">        TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((ph = p.hash) &gt; h)</div><div class=\"line\">            p = pl;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ph &lt; h)</div><div class=\"line\">            p = pr;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((pk = p.key) == k || (k != <span class=\"keyword\">null</span> &amp;&amp; k.equals(pk)))</div><div class=\"line\">            <span class=\"keyword\">return</span> p;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pl == <span class=\"keyword\">null</span>)</div><div class=\"line\">            p = pr;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pr == <span class=\"keyword\">null</span>)</div><div class=\"line\">            p = pl;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((kc != <span class=\"keyword\">null</span> ||</div><div class=\"line\">                  (kc = comparableClassFor(k)) != <span class=\"keyword\">null</span>) &amp;&amp;</div><div class=\"line\">                 (dir = compareComparables(kc, k, pk)) != <span class=\"number\">0</span>)</div><div class=\"line\">            p = (dir &lt; <span class=\"number\">0</span>) ? pl : pr;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((q = pr.find(h, k, kc)) != <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> q;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            p = pl;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>有没有发现，如果当你看懂putTreeVal，类比find是不是变得很好理解了呢？</p>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; <span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">balanceInsertion</span><span class=\"params\">(TreeNode&lt;K,V&gt; root,</span></span></div><div class=\"line\">                                                    TreeNode&lt;K,V&gt; x) &#123;</div><div class=\"line\">    x.red = <span class=\"keyword\">true</span>; <span class=\"comment\">// x为红</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</div><div class=\"line\">        <span class=\"comment\">// x为根</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((xp = x.parent) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            x.red = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> x;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// x父节点为黑 || x父节点为根（黑）</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!xp.red || (xpp = xp.parent) == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> root;</div><div class=\"line\">        <span class=\"comment\">// </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (xp == (xppl = xpp.left)) &#123;</div><div class=\"line\">            <span class=\"comment\">// ①</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ((xppr = xpp.right) != <span class=\"keyword\">null</span> &amp;&amp; xppr.red) &#123;</div><div class=\"line\">                xppr.red = <span class=\"keyword\">false</span>;</div><div class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</div><div class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</div><div class=\"line\">                x = xpp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// ②</span></div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x == xp.right) &#123;</div><div class=\"line\">                    root = rotateLeft(root, x = xp);</div><div class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        root = rotateRight(root, xpp);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xppl != <span class=\"keyword\">null</span> &amp;&amp; xppl.red) &#123;</div><div class=\"line\">                xppl.red = <span class=\"keyword\">false</span>;</div><div class=\"line\">                xp.red = <span class=\"keyword\">false</span>;</div><div class=\"line\">                xpp.red = <span class=\"keyword\">true</span>;</div><div class=\"line\">                x = xpp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x == xp.left) &#123;</div><div class=\"line\">                    root = rotateRight(root, x = xp);</div><div class=\"line\">                    xpp = (xp = x.parent) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : xp.parent;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (xp != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    xp.red = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (xpp != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        xpp.red = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        root = rotateLeft(root, xpp);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在插入新值后，可能打破了红黑树原有的“平衡”，balanceInsertion()的作用就是要维持这种“平衡”，保证最佳效率。所谓的红黑树“平衡”即：</p>\n<blockquote>\n<p>①：所有节点非黑即红；</p>\n<p>②：根为黑，叶子为null且为黑，红的两子节点为黑；</p>\n<p>③：任一节点到叶子节点的黑子节点个数相同；</p>\n</blockquote>\n<hr>\n<p>下面，以“(xp == (xppl = xpp.left))”简(chou)单(lou)的给大家画个图例（其中①②与源码注释相对应）。<br><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/balanceInsertion1.png\" alt=\"image\"></p>\n<hr>\n<p>图②中打钩的都是合格的红黑树其实，图②右边方框内为左旋右旋节点关系变化图解。<br><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/balanceInsertion2左旋右旋.png\" alt=\"image\"></p>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 左旋 与 右旋</span></div><div class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; <span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">rotateLeft</span><span class=\"params\">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</span> </span>&#123;</div><div class=\"line\">    TreeNode&lt;K,V&gt; r, pp, rl;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (r = p.right) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((rl = p.right = r.left) != <span class=\"keyword\">null</span>)</div><div class=\"line\">            rl.parent = p;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((pp = r.parent = p.parent) == <span class=\"keyword\">null</span>)</div><div class=\"line\">            (root = r).red = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.left == p)</div><div class=\"line\">            pp.left = r; <span class=\"comment\">// p为pp左子节点</span></div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            pp.right = r;</div><div class=\"line\">        r.left = p;</div><div class=\"line\">        p.parent = r;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> root;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; <span class=\"function\">TreeNode&lt;K,V&gt; <span class=\"title\">rotateRight</span><span class=\"params\">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</span> </span>&#123;</div><div class=\"line\">    TreeNode&lt;K,V&gt; l, pp, lr;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (l = p.left) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((lr = p.left = l.right) != <span class=\"keyword\">null</span>)</div><div class=\"line\">            lr.parent = p;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((pp = l.parent = p.parent) == <span class=\"keyword\">null</span>)</div><div class=\"line\">            (root = l).red = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pp.right == p)</div><div class=\"line\">            pp.right = l;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            pp.left = l;</div><div class=\"line\">        l.right = p;</div><div class=\"line\">        p.parent = l;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> root;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>左旋右旋过程包含在上面的图例中了，另附上两张网上看到的动图便于大家理解。</p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/rotateleft.gif\" alt=\"image\"></p>\n<p><img src=\"https://raw.githubusercontent.com/chenhongen/DemoRun/master/image/rotateright.gif\" alt=\"image\"></p>\n<p>同时，<a href=\"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html\" target=\"_blank\" rel=\"external\">在线红黑树插入删除动画演示【点我】</a>，还不理解的童鞋可以亲自直观的试试。</p>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">treeifyBin</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"keyword\">int</span> hash)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, index; Node&lt;K,V&gt; e;</div><div class=\"line\">    <span class=\"keyword\">if</span> (tab == <span class=\"keyword\">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</div><div class=\"line\">        resize();</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        TreeNode&lt;K,V&gt; hd = <span class=\"keyword\">null</span>, tl = <span class=\"keyword\">null</span>;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>)</div><div class=\"line\">                hd = p;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                p.prev = tl;</div><div class=\"line\">                tl.next = p;</div><div class=\"line\">            &#125;</div><div class=\"line\">            tl = p;</div><div class=\"line\">        &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> ((tab[index] = hd) != <span class=\"keyword\">null</span>)</div><div class=\"line\">            hd.treeify(tab);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>putVal()的treeifyBin()在链表中数目大于等于“TREEIFY_THRESHOLD - 1”时触发。当数目满足MIN_TREEIFY_CAPACITY时，链表将转为红黑树结构，否则继续扩容。treeify()类似putTreeVal()。</p>\n<p>至此，HashMap插入告一段落。时间有限，江湖再见。</p>\n"},{"title":"【java源码一带一路系列】之HashMap.putAll()","url":"http://rebey.cn/2017/05/07/【java源码一带一路系列】之HashMap.putAll()/","content":"<p>本文以jdk1.8中HashMap.putAll()方法为切入点，分析其中难理解、有价值的源码片段（类似源码查看是ctrl+鼠标左键的过程）。观光线路图：putAll() –&gt; putMapEntries() –&gt; tableSizeFor() –&gt; resize() –&gt; hash() –&gt; putVal()…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putAll</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class=\"line\">    putMapEntries(m, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">putMapEntries</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m, <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> s = m.size();</div><div class=\"line\">    <span class=\"keyword\">if</span> (s &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (table == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// pre-size</span></div><div class=\"line\">            <span class=\"comment\">// 这里“/loadFactor”得出hash table的capacity，“+1.0”结合下面“&lt;”就懂了。</span></div><div class=\"line\">            <span class=\"keyword\">float</span> ft = ((<span class=\"keyword\">float</span>)s / loadFactor) + <span class=\"number\">1.0F</span>; </div><div class=\"line\">            <span class=\"keyword\">int</span> t = ((ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY) ?</div><div class=\"line\">                     (<span class=\"keyword\">int</span>)ft : MAXIMUM_CAPACITY);</div><div class=\"line\">            <span class=\"keyword\">if</span> (t &gt; threshold)</div><div class=\"line\">                threshold = tableSizeFor(t);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s &gt; threshold)</div><div class=\"line\">            resize();</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"comment\">// 笔者疑问：原map加上m后可能需要扩容的判断在putVal中，在此是不是更佳呢？</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</div><div class=\"line\">            K key = e.getKey();</div><div class=\"line\">            V value = e.getValue();</div><div class=\"line\">            putVal(hash(key), key, value, <span class=\"keyword\">false</span>, evict);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 找到大于等于cap的最小的2的幂</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</div><div class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</div><div class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</div><div class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</div><div class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的“-1”可以理解为是为了++保证结果值≥原值++。举个栗子，假如cap=8（1000）。计算结果为16(10000)。这显然不是我们想要的最小的2的幂。关于抑或、右移的计算过程，我以size=3为例，可以参考便于理解：<br><img src=\"https://github.com/chenhongen/DemoRun/blob/master/image/tableSizeFor.png?raw=true\" alt=\"image\"></p>\n<p>那么问题来了。为了要遵循“2的幂次方”的套路呢？不仅tableSizeFor如此，连一些参数初始值也遵循着（如DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4）。</p>\n<p>根本意图为了提高效率，为了使用借助以下规律：</p>\n<blockquote>\n<p>取余(%)操作中如果除数是2的幂次方，则等同于与其除数减一的与(&amp;)操作</p>\n</blockquote>\n<p>因此在源码中会看到大量的“(n - 1) &amp; hash”语句，也就是为什么要按“2的幂次方”的套路出牌了。</p>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// hash table扩容至原来2倍，将原table数据重新映射到新table中</span></div><div class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</div><div class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">            threshold = Integer.MAX_VALUE;</div><div class=\"line\">            <span class=\"keyword\">return</span> oldTab;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></div><div class=\"line\">        newCap = oldThr;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></div><div class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</div><div class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</div><div class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</div><div class=\"line\">                  (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    threshold = newThr;</div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</div><div class=\"line\">    table = newTab;</div><div class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</div><div class=\"line\">            Node&lt;K,V&gt; e;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>; <span class=\"comment\">// 清空原table</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>) <span class=\"comment\">// 哈希表只有一个节点，直接赋值</span></div><div class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap); <span class=\"comment\">// 红黑树情况</span></div><div class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></div><div class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    Node&lt;K,V&gt; next;</div><div class=\"line\">                    do &#123;</div><div class=\"line\">                        next = e.next;</div><div class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</div><div class=\"line\">                                loHead = e;</div><div class=\"line\">                            <span class=\"keyword\">else</span></div><div class=\"line\">                                loTail.next = e;</div><div class=\"line\">                            loTail = e;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</div><div class=\"line\">                                hiHead = e;</div><div class=\"line\">                            <span class=\"keyword\">else</span></div><div class=\"line\">                                hiTail.next = e;</div><div class=\"line\">                            hiTail = e;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                        newTab[j] = loHead;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                        newTab[j + oldCap] = hiHead;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> newTab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>hashMap使用链表法避免哈希冲突（相同hash值），当链表长度大于TREEIFY_THRESHOLD（默认为8）时，将链表转换为红黑树，当然小于UNTREEIFY_THRESHOLD（默认为6）时，又会转回链表以达到性能均衡。</p>\n<p>根据“e.hash &amp; oldCap”是否为零将原链表拆分成2个链表，一部分仍保留在原链表中不需要移动，一部分移动到“原索引+oldCap”的新链表中。</p>\n<p>那么问题来了，“e.hash &amp; oldCap”从何而来！？<br>因为扩容前后hash不变，由上文n遵循“2的幂次方”且“index=(n-1)&amp;hash”可知：新的index的决定因素为：++(n-1)二进制最高位对应的hash位上是0还是1++；因此源码作者巧妙的拉关系，以“oldCap等价于newTab的(n-1)的最高位”推出“e.hash &amp; oldCap”！</p>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> h;</div><div class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>异或运算：(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</p>\n<p>原 来 的 hashCode : 1111 1111 1111 1111 0100 1100 0000 1010<br>移位后的hashCode: 0000 0000 0000 0000 1111 1111 1111 1111<br>进行异或运算 结果：1111 1111 1111 1111 1011 0011 1111 0101</p>\n<p>这样做的好处是，可以将hashcode高位和低位的值进行混合做异或运算，而且混合后，低位的信息中加入了高位的信息，这样高位的信息被变相的保留了下来。掺杂的元素多了，那么生成的hash值的随机性会增大。</p>\n</blockquote>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></div><div class=\"line\">               <span class=\"keyword\">boolean</span> evict) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</div><div class=\"line\">        n = (tab = resize()).length;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</div><div class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        Node&lt;K,V&gt; e; K k;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</div><div class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">            e = p;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</div><div class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></div><div class=\"line\">                        treeifyBin(tab, hash);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</div><div class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                p = e;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</div><div class=\"line\">                e.value = value;</div><div class=\"line\">            afterNodeAccess(e);</div><div class=\"line\">            <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ++modCount;</div><div class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</div><div class=\"line\">        resize();</div><div class=\"line\">    afterNodeInsertion(evict);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相对清晰，留坑后填，江湖再见</p>\n<hr>\n<p><strong>源码中出现的全局变量：</strong></p>\n<p><em><a href=\"http://www.cnblogs.com/szlbm/p/5504166.html\" target=\"_blank\" rel=\"external\">transient</a> Node<k,v>[] table;</k,v></em>  哈希表,初始化长度length(默认值是16)</p>\n<p><em>final float loadFactor;</em>  负载因子（默认0.75）,表示table的填满程度。</p>\n<p><em>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</em>  最大容量</p>\n<p><em>int threshold;</em>  阈值 = table.length * loadFactor</p>\n<p>…</p>\n<hr>\n<p><strong>参考文献：</strong></p>\n<ol>\n<li><a href=\"http://blog.csdn.net/fan2012huan/article/details/51097331\" target=\"_blank\" rel=\"external\">HashMap源码注解 之 静态工具方法hash()、tableSizeFor()（四）</a>；201604</li>\n<li><a href=\"http://lishuo.me/2017/04/16/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BHashMap/?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">源码分析之HashMap</a>；201704</li>\n<li><a href=\"http://blog.csdn.net/u010176014/article/details/52213395\" target=\"_blank\" rel=\"external\">【集合详解】HashMap源码解析</a>；201608</li>\n<li><a href=\"http://note.youdao.com/share/?spm=5176.100239.0.0.Kai02P&amp;id=07710dc47ce4a8812ddc0261cb659f2e&amp;type=note#/\" target=\"_blank\" rel=\"external\">HashMap源码分析（jdk1.8）</a>;201604</li>\n</ol>\n"},{"title":"WebVR端午龙头记","url":"http://rebey.cn/2017/04/29/AFrame端午龙头记/","content":"<ul>\n<li><p><strong>效果展示</strong>：</p>\n<p>  ☞ <a href=\"http://rebey.oschina.io/aframe/\" target=\"_blank\" rel=\"external\">点我打开新世界</a></p>\n<p>  <img src=\"https://sfault-image.b0.upaiyun.com/435/217/435217286-5904581ecba5f_articlex\" alt=\"图片描述\"></p>\n<ul>\n<li><p><strong>相关技术</strong>：</p>\n<p>☞ <em>aframe.js</em>： Mozilla 开源的网页虚拟现实体验( WebVR )框架；</p>\n<p>☞ <em>MagicaVoxel</em>： @ephtracy开发的体素编辑神器；</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>代码实现</strong>：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">html:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/aframe.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/aframe-extras.loaders.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a-scene</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-assets</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-asset-item</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myModelObj\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"che.obj\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-asset-item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-asset-item</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myModelMtl\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"che.mtl\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-asset-item</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- &lt;a-asset-item id=\"myPlyModel\" src=\"che.ply\"&gt;&lt;/a-asset-item&gt; --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"skyTexture\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"image/sechelt.jpg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a-assets</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-entity</span> <span class=\"attr\">position</span>=<span class=\"string\">\"0 1.2 -5\"</span> <span class=\"attr\">scale</span>=<span class=\"string\">\"0.035 0.035 0.035\"</span> <span class=\"attr\">rotation</span>=<span class=\"string\">\"-10 -150 -15\"</span> <span class=\"attr\">obj-model</span>=<span class=\"string\">\"obj: #myModelObj; mtl: #myModelMtl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-animation</span> <span class=\"attr\">attribute</span>=<span class=\"string\">\"position\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"0 1.4 -5\"</span> <span class=\"attr\">direction</span>=<span class=\"string\">\"alternate\"</span> <span class=\"attr\">dur</span>=<span class=\"string\">\"2000\"</span> <span class=\"attr\">repeat</span>=<span class=\"string\">\"indefinite\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-animation</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-animation</span> <span class=\"attr\">attribute</span>=<span class=\"string\">\"rotation\"</span> <span class=\"attr\">begin</span>=<span class=\"string\">\"click\"</span> <span class=\"attr\">dur</span>=<span class=\"string\">\"7200\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"-10 570 -15\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-animation</span>&gt;</span></div><div class=\"line\">  \t</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a-entity</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- &lt;a-entity ply-model=\"src: #myPlyModel\" position=\"0 1 -1\" scale=\"0.01 0.01 0.01\" rotation=\"-90 0 0\"&gt;&lt;/a-entity&gt; --&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-sky</span> <span class=\"attr\">src</span>=<span class=\"string\">\"#skyTexture\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-sky</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-text</span> <span class=\"attr\">value</span>=<span class=\"string\">\"rebey.cn 端午节快乐！\"</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#CCC\"</span> </span></div><div class=\"line\">    <span class=\"attr\">position</span>=<span class=\"string\">\"-0.9 0.2 -3\"</span> <span class=\"attr\">scale</span>=<span class=\"string\">\"2 2 2\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">a-text</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a-camera</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a-cursor</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a-cursor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a-camera</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a-scene</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>代码分析</strong>：</p>\n<p> 由aframe全权负责搭建3d全景，由 <em>entity-龙头、sky-天空环境、text-文字、camera-模拟镜头焦点、assert-存放定义对象（通过id引用）</em>构成。更多aframe知识点参考官网<a href=\"https://aframe.io/docs/0.5.0/guides/building-with-magicavoxel.html\" target=\"_blank\" rel=\"external\">aframe.io</a>。最花时间的就是使用MagicaVoxel画的龙头，画了我两天近十几个小时。最终和大家分享成果，庆祝一年一度的端午节。</p>\n</li>\n<li><p><strong>写在最后</strong>：</p>\n<p> 最重要的往往在最后。细心的你发现了吗？在源码中a-text的值明明写了中文却没有显示。是的，aframe用的字体不支持伟大的汉字，前端大神可以尝试一下更改aframe引用的字体。</p>\n<p> 还有一点重要的是，引用aframe.js后必须运行在服务器端，否则可能出现浏览器提示跨域冲突的问题，可以将代码置于nodejs或者tomcat等服务器下运行。</p>\n<p> 此外，aframe支持MagicaVoxel导出的两种方式.PLY (with Baked Shadows)与.OBJ。当你选择的是OBJ时请注意，导出的是3个文件（.obj/.png/.mtl）缺一不可。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>关于作者</strong>：</p>\n<p> <a href=\"http://rebey.cn\">rebey.cn</a>：个人博客-沉迷前端美色的java工程师，有工作机会欢迎联系。</p>\n</li>\n</ul>\n"},{"title":"SSM架构问题记录之配置篇","url":"http://rebey.cn/2017/02/19/SSM架构问题记录之配置篇/","content":"<ul>\n<li><p><strong>概要</strong></p>\n<p>  习惯了使用别人的框架，自己动手时碰到的一些问题。</p>\n<p>  工具：maven+spring+mybatis+oracle等。</p>\n</li>\n<li><p><strong>问题01</strong></p>\n<p>  使用MyBatis Generator自动生成工具生成代码，使用junit测试insert一条记录。（由于<a href=\"http://www.cnblogs.com/panie2015/p/5807683.html\" target=\"_blank\" rel=\"external\">oracle主键自增需要依赖序列</a>，这里采用手动赋值测试。）</p>\n<p>  <strong>报错</strong>：==<em>…无效的列类型: getBigDecimal not implemented for class oracle.jdbc.driver.T4CRowidAcces…</em>==；</p>\n</li>\n<li><p><strong>解决01</strong></p>\n<p>  最主要的原因，是我在mybatis-config.xml中配置了“<setting name=\"useGeneratedKeys\" value=\"true\">”而oracle并不支持所以报错；<br>  此外值得一提的是，Generator在生成PO对象时会更加++NUMBER类型的长度++对应java数据类型。如下：</setting></p>\n<p>  长度 | 类型<br>  —|—<br>  1~4 | Short<br>  5~9 | Integer<br>  10~18 | Long<br>  18+（或不写） | BigDecimal</p>\n</li>\n<li><p><strong>挥别亲朋，漂泊异乡在这几平米的空间里就是写梦想，没有时间浪了。待续…</strong></p>\n</li>\n</ul>\n"},{"title":"js：对象-属性-set/get","url":"http://rebey.cn/2016/12/31/js中的set与get/","content":"<p><strong>碎语</strong>：</p>\n<p>&emsp;&emsp;js有<em>对象-属性</em>这早已耳熟能详，直到偶然看到某开源js源码才发现，同java一样，它也有对应的<em>set/get方法</em>。</p>\n<p><strong>demo</strong>：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> che = &#123;</div><div class=\"line\">\t_wheels: <span class=\"number\">4</span>,</div><div class=\"line\">\tget wheels() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._wheels;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tset wheels(value) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'give me a wheel at least,please!'</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>._wheels = value;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che.wheels: \"</span>+che.wheels);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che._wheels: \"</span>+che._wheels);</div><div class=\"line\"></div><div class=\"line\">che.wheels = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che.wheels: \"</span>+che.wheels);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che._wheels: \"</span>+che._wheels);</div><div class=\"line\"></div><div class=\"line\">che.wheels = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che.wheels: \"</span>+che.wheels);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che._wheels: \"</span>+che._wheels);</div></pre></td></tr></table></figure></p>\n<p><strong>兼容</strong>：这种写法并==不支持IE8==，替代方法如下;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> che2 = &#123;</div><div class=\"line\">\t_wheels: <span class=\"number\">4</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(che2, <span class=\"string\">\"wheels\"</span>, &#123;</div><div class=\"line\">\tget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._wheels;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tset: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'give me a wheel at least,please!'</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>._wheels = value;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>补充</strong>：</p>\n<p>传说中的标准写法（不代表常用）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Field</span>(<span class=\"params\">val</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.value = val;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">Field.prototype = &#123;  </div><div class=\"line\">    get value()&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._value;  </div><div class=\"line\">    &#125;,  </div><div class=\"line\">    set value(val)&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>._value = val;  </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> field = <span class=\"keyword\">new</span> Field(<span class=\"string\">\"che\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(field.value);</div><div class=\"line\"></div><div class=\"line\">field.value = <span class=\"string\">\"che2\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(field.value);</div></pre></td></tr></table></figure></p>\n<p>常用写法（外界无法修改默认值）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> che3 = &#123;</div><div class=\"line\">\tget wheels() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che3.wheels: \"</span> + che3.wheels);</div><div class=\"line\"></div><div class=\"line\">che3.wheels = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"che3.wheels: \"</span> + che3.wheels);</div></pre></td></tr></table></figure></p>\n<p><del>最后祝各位程序员，新年吉祥。早！日！脱！单</del>！</p>\n<p><strong>参考</strong>：<a href=\"http://www.cnblogs.com/lhb25/archive/2010/09/19/1830724.html\" target=\"_blank\" rel=\"external\">网络之美：JavaScript中Get和Set访问器的实现 </a></p>\n"},{"title":"CheBus2Mail 实时公交信息（邮件版）踩坑记","url":"http://rebey.cn/2016/10/23/CheBus2Mail 实时公交信息（邮件版）踩坑记/","content":"<ul>\n<li><p><strong>前景</strong></p>\n<p>  在寒冬，于北京。错过一辆晚高峰的公交就好比全世界从你身边路过。</p>\n<p>  需求是第一生产力，公交集团推出了查询实时公交的微信公众号，无奈不准确且不稳定，用户体验差。随后某度地图与其合作将此功能结合到了自己的产品中，公交实时定位基本准确。查询总共分三步：<del>①把冰箱门打开</del> <em>①输入公交车次号;②选择公交开往方向；③选择乘坐站点</em>。查询结果会告诉你，离你最近的三辆公交距离你还有几站。</p>\n<p>  那么问题来了，我每天就是要从公司坐同一趟车回家，车次、方向、站点、时间基本固定。根据查询结果的距离站点数，决定我出门候车时间。可以极大降低因候车时间，从而减少雾霾吸收量。然而，不愉快的事我每天需要抽出时间打开它那沉重的APP，输入相同的数字，点击重复的操作才能得到我想要的数据。这么一来，需求很明确了，我们需要一个定时推送实时公交信息的功能的喔~</p>\n</li>\n<li><p><strong>思路</strong></p>\n</li>\n</ul>\n<ol>\n<li>爬虫：nodejs也好、python也好、java也好。能爬到数据的就是好爬虫；</li>\n<li>解析：抓取后数据处理，提取关键信息；</li>\n<li>推送：微信也好、QQ也好、邮件也好。不需要认证审核、消息数量无限制、开发代价小，那么首选就是邮件了。</li>\n</ol>\n<ul>\n<li><p><strong>难点</strong></p>\n<p>门神：起初由于最近刚自学了nodejs，看到它可以写爬虫，就尝试用它来抓取网页数据。然而公交集团的php网站做了类似cookie校验的措施。ajax请求无情的抛回来“timeout”。也尝试过模仿请求头来请求，也吃了闭门羹。这种防爬虫的措施，让我不得不放弃几行代码就能实现爬虫的nodejs，而改用主要用于自动化测试的java ==selenium==。</p>\n<p>版本：selenium需要浏览器驱动（如：chromedriver.exe）的辅助。新版本的浏览器可能出现不支持的情况！如果你在本机运行selenium启动浏览器没问题，在服务器运行报错。jar包引入等都没问题情况下，查询浏览器版本吧。</p>\n<p>定时：==ScheduledExecutorService==实现定时效果。</p>\n<p>运行：在本机，将java project打成runnable jar。win7下直接双击可直接执行，而放到window server 2008服务器上却执行不了，甚是郁闷。研究jre/jvm配置后无果，变通采用==exe4j==工具，将jar打成exe可执行文件。顺带支持自定义logo。</p>\n<p><img src=\"https://github.com/chenhongen/imgStorage/raw/master/20161023-cbm.png\" alt=\"image\"></p>\n</li>\n<li><p><strong>效果</strong></p>\n<p>每天下班时间邮箱收到抓取后的公交信息邮件。</p>\n<p><img src=\"https://github.com/chenhongen/imgStorage/raw/master/20161023-result.jpg\" alt=\"image\"></p>\n</li>\n<li><p><strong>源码</strong></p>\n<p>保护水表，暂不开源。</p>\n</li>\n</ul>\n"},{"title":"js仿Excel公式应用-ruleJS","url":"http://rebey.cn/2016/09/25/js仿Excel公式应用-ruleJS/","content":"<ul>\n<li><p><strong>概要</strong></p>\n<p>  这是一个基于ruleJS的应用小Demo，体现<em>网页表格等输入公式（类似Excel）并自动计算结果</em>的效果；适用IE9及以上主流浏览器；demo根据<a href=\"https://github.com/chenhongen/ruleJS\" target=\"_blank\" rel=\"external\">handsontable github</a>上源码改编。</p>\n</li>\n<li><p><strong>难点</strong></p>\n<p>  ruleJS取值定位类似Excel，默认使用了横轴英文字母(A、B、C…),纵轴数字（1,、2、3…）来定位值；如，id值为“C1”即表示第3列第1行元素;此时当网页同时存在多个表格时，需要考虑id重复的隐患，本例使用了iframe来回避这个问题；</p>\n<p>  尝试兼容IE8做了些修改，替换了源码中使用的一些IE8不支持的函数，诸如：querySelectorAll、Array.indexOf、Array.filter、Array.forEach、getElementsByClassName等；最后还是因为ie8没有HTMLElement兼容失败，暂时抛弃小八（T T）；</p>\n<p>  handsontable贴出的介绍函数链接已失效，可参考Excel相关函数定义规范来使用（或者看js源码–）；</p>\n</li>\n<li><p><strong>链接</strong><br>  演示地址：<a href=\"https://chenhongen.github.io/ruleJS4Excel\" target=\"_blank\" rel=\"external\">点我</a>；<br>  demo源码：<a href=\"https://github.com/chenhongen/ruleJS4Excel\" target=\"_blank\" rel=\"external\">github传送门</a>；</p>\n</li>\n<li><p><strong>源码分析</strong></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ ruleJS.all.full.js片段：</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * form elements, which can be parsed</div><div class=\"line\">     * @type &#123;string[]&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"comment\">//var formElements = ['input[type=text]', '[data-formula]'];</span></div><div class=\"line\">    <span class=\"comment\">//定义需要转换为公式的选择器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> formElements = [<span class=\"string\">'input[class=rj-formula]'</span>, <span class=\"string\">'[data-formula]'</span>];</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ jsp片段：</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"A3\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"7\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rj-formula\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"K1\"</span> <span class=\"attr\">data-formula</span>=<span class=\"string\">\"SUM(A1:C3,A1)\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rj-formula\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"querySelector/querySelectorAll","url":"http://rebey.cn/2016/09/21/querySelector与querySelectorAll/","content":"<p><strong>格式</strong>：</p>\n<p><em>[1].querySelector([2]);</em></p>\n<p><em>[1].querySelectorAll([2]);</em></p>\n<p>[1]Document/Element;</p>\n<p>[2]CSS 选择器: id, 类, 类型, 属性, 属性值等;多个时querySelectorAll(“①,②，…”)或querySelectorAll([“①”,”②”，…]);</p>\n<p><strong>说明</strong>：主要作用为CSS选择器；querySelector返回第一个匹配元素,匹配不到返回null；querySelectorAll返回所有匹配元素集合，匹配不到返回NodeList[]；</p>\n<p>这里着重说明querySelectorAll，其返回值为NodeList。<br>NodeList是静态的，主要有length与item两个属性；常把NodeList转为数组使用：Array.prototype.slice.call(div_list);</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// 体现静态</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"body\"</span>).querySelectorAll(<span class=\"string\">\"div\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(oDiv);</div><div class=\"line\">alert(<span class=\"string\">\"querySelectorAll:\"</span>+a.length+<span class=\"string\">\"getElementsByTagName:\"</span>+b.length);</div><div class=\"line\"><span class=\"comment\">// 结果：querySelectorAll:3 getElementsByTagName:4</span></div></pre></td></tr></table></figure>\n<p>在IE8下返回类型为StaticNodeList，StaticNodeList只有length属性，使用时小心。</p>\n<p><strong>兼容</strong>：主流浏览器基本支持，特别注意的是，<a href=\"http://caniuse.com/#search=querySelector\" target=\"_blank\" rel=\"external\">IE8只支持CSS2.1和一小部分CSS3</a></p>\n<p><strong>引发</strong>：<br>在handsontable上看到用ruleJS实现了类似Excel的单元格公式计算。download了源码想研究下，结果发现IE8不好使，一查源头就到了querySelectorAll上。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ruleJS src</span></div><div class=\"line\"><span class=\"keyword\">var</span> formElements = [<span class=\"string\">'input[type=text]'</span>, <span class=\"string\">'[data-formula]'</span>];</div><div class=\"line\">[].slice.call($totalElements).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$item</span>) </span>&#123;</div><div class=\"line\">    registerElementInMatrix($item);</div><div class=\"line\">    registerElementEvents($item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>参考</strong>：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector\" target=\"_blank\" rel=\"external\">MDN Web API</a></p>\n"},{"title":"H5+CSS3 罗小黑动画","url":"http://rebey.cn/2016/09/03/H5+CSS3 罗小黑动画/","content":"<ul>\n<li><p><strong>概要</strong></p>\n<p>  css3-animation-steps()函数 + Sprite（雪碧图）让萌萌的小黑动起来；<br>  html5-canvas 画一个逗喵神器。</p>\n</li>\n<li><p><strong>难点</strong></p>\n<p>  实现纯canvas绘制以指定坐标为原点旋转指定角度的椭圆；<br>  椭圆与曲线活动轨迹磨合调整，多canvas整合；</p>\n</li>\n<li><p><strong>链接</strong><br>  关于本人使用steps()灵感来源于<a href=\"https://jdc.jd.com/archives/1801\" target=\"_blank\" rel=\"external\">京东618</a>的这篇技术贴，里面大致阐述了steps原理，网上还有更透彻的讲解，感兴趣的童鞋可以查阅;<br>  演示地址：<a href=\"https://chenhongen.github.io/h5css3-LUOXIAOHEI/\" target=\"_blank\" rel=\"external\">点我</a>；<br>  demo源码：<a href=\"https://github.com/chenhongen/h5css3-LUOXIAOHEI\" target=\"_blank\" rel=\"external\">github传送门</a>；</p>\n</li>\n<li><p><strong>主要源码</strong></p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ <span class=\"selector-tag\">css</span>片段：</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.xiaohei</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">350px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(xx.png) no-repeat <span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">animation</span>: toleft <span class=\"number\">2s</span> infinite <span class=\"built_in\">steps</span>(11, end);</div><div class=\"line\">\t<span class=\"attribute\">-moz-animation</span>: toleft <span class=\"number\">1.5s</span> infinite <span class=\"built_in\">steps</span>(11);</div><div class=\"line\">\t<span class=\"attribute\">-webkit-animation</span>: toleft <span class=\"number\">2s</span> infinite <span class=\"built_in\">steps</span>(11);</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">keyframes</span> toleft &#123;</div><div class=\"line\">\t<span class=\"comment\">/*0% &#123;background-position:0;&#125;*/</span></div><div class=\"line\">\t100%&#123; <span class=\"attribute\">background-position</span>: -<span class=\"number\">4180px</span> <span class=\"number\">0px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> toleft &#123;</div><div class=\"line\">\t100%&#123; <span class=\"attribute\">background-position</span>: -<span class=\"number\">4180px</span> <span class=\"number\">0px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-<span class=\"keyword\">moz</span>-<span class=\"keyword\">keyframes</span> toleft &#123;</div><div class=\"line\">\t100% &#123;<span class=\"attribute\">background-position</span>: -<span class=\"number\">4180px</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ js片段：</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"number\">30</span>, <span class=\"comment\">// 高度（y轴坐标）</span></div><div class=\"line\">\tarr = [<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">50</span>,<span class=\"number\">1</span>,<span class=\"number\">-50</span>,<span class=\"number\">-30</span>,<span class=\"number\">-20</span>,<span class=\"number\">-10</span>,<span class=\"number\">-8</span>,<span class=\"number\">-6</span>,<span class=\"number\">-5</span>,<span class=\"number\">-3</span>], <span class=\"comment\">// 草头旋转角度数组</span></div><div class=\"line\">\t<span class=\"comment\">//arrDown = [-6,-7,-8,-9,-10,-20,-30,-50,1,50,30,20,10,8,6,5,4], // 草头下至上旋转角度数组</span></div><div class=\"line\">\ti = <span class=\"number\">0</span>, <span class=\"comment\">// 数组下标</span></div><div class=\"line\">\tflag = <span class=\"literal\">true</span>, <span class=\"comment\">// 切换标识</span></div><div class=\"line\">\ttimer = <span class=\"literal\">null</span>; <span class=\"comment\">// 定时器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 绘制椭圆（草头）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawOval</span>(<span class=\"params\">ctx, h, neg</span>) </span>&#123;</div><div class=\"line\">\tctx.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>);<span class=\"comment\">//清除画布上的指定区域</span></div><div class=\"line\">\tctx.beginPath();</div><div class=\"line\">\t</div><div class=\"line\">\tctx.save();</div><div class=\"line\">\tctx.translate(<span class=\"number\">16</span>,(h-i/<span class=\"number\">8</span>)+<span class=\"number\">8</span>); <span class=\"comment\">// 垂直变化</span></div><div class=\"line\">\tctx.rotate(<span class=\"built_in\">Math</span>.PI/arr[i]*neg); <span class=\"comment\">// 旋转角度</span></div><div class=\"line\">\tctx.scale(<span class=\"number\">1</span>,<span class=\"number\">1</span>/<span class=\"number\">2</span>); <span class=\"comment\">// 绘制椭圆</span></div><div class=\"line\">\tctx.arc(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">15</span>,<span class=\"number\">0</span>,<span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>);</div><div class=\"line\">\tctx.fill(); <span class=\"comment\">// 填充</span></div><div class=\"line\">\tctx.stroke();</div><div class=\"line\">\tctx.restore();</div><div class=\"line\"></div><div class=\"line\">\ti++; <span class=\"comment\">// 数组遍历</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 贝塞尔曲线（草杆）绘制</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawLine</span>(<span class=\"params\">h</span>) </span>&#123;</div><div class=\"line\">\tcontext.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>);<span class=\"comment\">//清除画布上的指定区域</span></div><div class=\"line\">\tcontext.beginPath();</div><div class=\"line\">\tcontext.moveTo(<span class=\"number\">20</span>,h+<span class=\"number\">5</span>); <span class=\"comment\">// 起点</span></div><div class=\"line\">\tcontext.bezierCurveTo(<span class=\"number\">80</span>,<span class=\"number\">100</span>,<span class=\"number\">120</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">100</span>); <span class=\"comment\">// </span></div><div class=\"line\">\tcontext.stroke();</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 绘制函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\tclearInterval(timer);</div><div class=\"line\">\ttimer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(h===<span class=\"number\">150</span>) &#123;flag = <span class=\"literal\">false</span>; i = <span class=\"number\">0</span>;&#125; <span class=\"comment\">// 切换条件</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(h===<span class=\"number\">30</span>) &#123;flag = <span class=\"literal\">true</span>; i = <span class=\"number\">0</span>;&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(flag) &#123;</div><div class=\"line\">\t\t\th = ++h;</div><div class=\"line\">\t\t\t(h%<span class=\"number\">8</span> == <span class=\"number\">0</span>) &amp;&amp; drawOval(context1, h, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\th = --h;</div><div class=\"line\">\t\t\t(h%<span class=\"number\">8</span> == <span class=\"number\">0</span>) &amp;&amp; drawOval(context1, h, <span class=\"number\">-1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tdrawLine(h);</div><div class=\"line\"></div><div class=\"line\">\t\tcontext.drawImage(canvas1,<span class=\"number\">0</span>,<span class=\"number\">0</span>); <span class=\"comment\">// 合并多画布</span></div><div class=\"line\">\t&#125;, v);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Json的转换与传递","url":"http://rebey.cn/2016/04/16/Json的转换与传递/","content":"<ul>\n<li><p><strong>概要</strong></p>\n<p>  项目中常用的json形式数据在前后台实现string与object对象等各种互转相关知识点整理。</p>\n</li>\n<li><p><strong>前端：Form Data–&gt;Json Object–&gt;Json String:</strong></p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ jsp片段：</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jsonForm\"</span>&gt;</span></div><div class=\"line\">    cd：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"goodsCd\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"20150904\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">    name：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"goodsName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"che\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ js片段：</div><div class=\"line\"><span class=\"comment\">//具有name、value属性，序列化成一个Object对象</span></div><div class=\"line\">$.fn.serializeObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">   <span class=\"keyword\">var</span> arr = <span class=\"keyword\">this</span>.serializeArray();</div><div class=\"line\">   $.each(arr, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (obj[<span class=\"keyword\">this</span>.name]) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!obj[<span class=\"keyword\">this</span>.name].push) &#123;</div><div class=\"line\">               obj[<span class=\"keyword\">this</span>.name] = [ obj[<span class=\"keyword\">this</span>.name] ];</div><div class=\"line\">           &#125;</div><div class=\"line\">           obj[<span class=\"keyword\">this</span>.name].push(<span class=\"keyword\">this</span>.value || <span class=\"string\">''</span>);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           obj[<span class=\"keyword\">this</span>.name] = <span class=\"keyword\">this</span>.value || <span class=\"string\">''</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">   <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> jsonForm = $(<span class=\"string\">\"#jsonForm\"</span>);</div><div class=\"line\"><span class=\"comment\">// json对象转json字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonStr = <span class=\"built_in\">JSON</span>.stringify(jsonForm.serializeObject());</div><div class=\"line\">alert(jsonStr);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>前端：Json String–&gt;Json Object：</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ js片段：</div><div class=\"line\">jQuery.parseJSON(jsonStr));</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>前后端：Json Object–&gt;JavaBean：</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ js片段：</div><div class=\"line\"><span class=\"comment\">// rb须与后台实体变量名称同名</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRbJson</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rbJson = &#123;&#125;;</div><div class=\"line\">    </div><div class=\"line\">    rbJson[<span class=\"string\">\"rb.goodsType\"</span>] = <span class=\"string\">\"a\"</span>;</div><div class=\"line\">    rbJson[<span class=\"string\">\"rb.goodsCd\"</span>] = <span class=\"string\">\"b\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> rbJson;</div><div class=\"line\">&#125;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: <span class=\"string\">\"setJsonObject.action\"</span>,</div><div class=\"line\">\ttype: <span class=\"string\">'POST'</span>,</div><div class=\"line\">\tcache: <span class=\"literal\">false</span>,</div><div class=\"line\">\t<span class=\"keyword\">async</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">\tdata: getRbJson(),</div><div class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\terror: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">jqXHR, textStatus, errorThrown</span>) </span>&#123;</div><div class=\"line\">\t    alert(jqXHR.responseText);</div><div class=\"line\">\t&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ java片段：</div><div class=\"line\"><span class=\"keyword\">private</span> RbGoods rb;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RbGoods <span class=\"title\">getRb</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> rb;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRb</span><span class=\"params\">(RbGoods rb)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.rb = rb;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">setJsonObject</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    System.out.println(rb.getGoodsCd());</div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>前后端：Json String–&gt;JavaBean：</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ js片段：</div><div class=\"line\"><span class=\"keyword\">var</span> rbStr = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> rbArray = [];</div><div class=\"line\">rbArray.push(&#123;goodsCd:<span class=\"string\">'1'</span>,goodsName:<span class=\"string\">'che'</span>&#125;);</div><div class=\"line\">rbArray.push(&#123;goodsCd:<span class=\"string\">'2'</span>,goodsName:<span class=\"string\">'chen'</span>&#125;);</div><div class=\"line\">rbStr[<span class=\"string\">\"jsonArrayStr\"</span>] = rbArray;</div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">       url: <span class=\"string\">\"jsonStrToObject.action\"</span>,</div><div class=\"line\">      type: <span class=\"string\">'POST'</span>,</div><div class=\"line\">     cache: <span class=\"literal\">false</span>,</div><div class=\"line\">       <span class=\"keyword\">async</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">       data: &#123;jsonStr:<span class=\"built_in\">JSON</span>.stringify(rbArray)&#125;,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;&#125;,</div><div class=\"line\">   error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">jqXHR, textStatus, errorThrown</span>) </span>&#123;</div><div class=\"line\">           alert(jqXHR.responseText);</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">☞ java片段：</div><div class=\"line\"><span class=\"keyword\">private</span> String jsonStr;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getJsonStr</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> jsonStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJsonStr</span><span class=\"params\">(String jsonStr)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.jsonStr = jsonStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">jsonStrToObject</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// String转JSON</span></div><div class=\"line\">    JSONArray jsonArray = JSONArray.fromObject(jsonStr);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; jsonArray.size(); i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// JSON转object对象</span></div><div class=\"line\">        String JOStr = jsonArray.getString(i);</div><div class=\"line\">        JSONObject JO = JSONObject.fromObject(JOStr);</div><div class=\"line\">        RbGoods goods =(RbGoods)JSONObject.toBean(JO, RbGoods.class);</div><div class=\"line\">        System.out.println(goods.getGoodsCd());</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">function <span class=\"title\">newchePoint</span><span class=\"params\">(obj)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;che id=\\\"\"</span>+obj.id+</div><div class=\"line\">    <span class=\"string\">\"\\\" type=\\\"\"</span>+obj.type+<span class=\"string\">\"\\\" value=\\\"\\\"/&gt;\\r\\n\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>更新ing…</strong></li>\n</ul>\n"},{"title":"category","url":"http://rebey.cn/category/index.html","content":""},{"title":"about","url":"http://rebey.cn/about/index.html","content":""},{"title":"search","url":"http://rebey.cn/search/index.html","content":""},{"title":"project","url":"http://rebey.cn/project/index.html","content":""},{"title":"tag","url":"http://rebey.cn/tag/index.html","content":""},{"title":"link","url":"http://rebey.cn/link/index.html","content":""}]